{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Restman Swagger",
    "description": "Outlines the calls that can be made to restman to create, delete, list, or update attributes on the API Gateway"
  },
  "host": "ssg92.ca.com:8443",
  "basePath": "/restman/",
  "tags": [
    {
      "name": "Active Connectors",
      "description": "Active connectors are connectors that poll for messages. For example MQ Native Queues and SFTP Polling Listeners are examples of Active Connectors."
    },
    {
      "name": "Assertion Security Zones",
      "description": "Assertion Security Zones entities are used to apply security zones to assertions. By default, assertions do not have a security zone assigned to them."
    },
    {
      "name": "Audit Configuration",
      "description": "Since: 1.0.4: This resource is used to manage audit configurations. These configurations are stored as cluster properties in the gateway."
    },
    {
      "name": "Bundle",
      "description": "This resource is used to export and import bundles for migration. See https://<gateway_host:8443/restman/1.0/doc/migration.html for more documentation on migration and bundling."
    },
    {
      "name": "Cassandra Connection ",
      "description": "Since: 1.0.1: Cassandra connections allow the Gateway to query external databases and then use the query results during policy consumption. Cassandra Connection"
    },
    {
      "name": "Certificate",
      "description": "Certificates are either HTTPS and LDAPS certificates.This resource enables the management of those certificates."
    },
    {
      "name": "Cluster Properties",
      "description": "Cluster properties are used to set global properties. Example cluster properties include \"cluster.hostname\" and \"log.levels\""
    },
    {
      "name": "Custom Key Value Store",
      "description": "A Custom key value is an item that can be stored by a custom assertion."
    },
    {
      "name": "Email Listeners",
      "description": "An email listener will periodically poll an email server for messages to process."
    },
    {
      "name": "Encapsulated Assertion",
      "description": "Encapsulated Assertion lets you turn any policy fragment into a self-contained \"assertion\" that accepts input values and sets output values."
    },
    {
      "name": "Firewall Rule",
      "description": "Since: 1.0.1: A firewall rule is a rule to accept or redirect traffic. This is only available on hardware installations."
    },
    {
      "name": "Folders",
      "description": "Folders are used to organize the policies, services, and aliases you have on the Gateway."
    },
    {
    "name": "Generic Entities",
    "description": "A generic entities is used by some modular assertions to represent any entity."
  },
  {
    "name": "Group",
    "description": "A group represents a group identity in an identity provider. When no identity provider is specified in the url then the internal identity provider is assumed. Groups can only be retrieved, they can not be created."
  },
  {
    "name": "Http Configurations",
    "description": "HTTP Configuration are used to configure various options to be used by the Gateway for HTTP/HTTPS connections. For example, you can configure the login credentials for an HTTPS host, define a proxy for the host, or specify a private key to be used for authentication."
  },
  {
    "name": "Identity Providers",
    "description": "An Identity provider is used to store and provide identities."
  },
  {
    "name": "Interface Tags",
    "description": "Interfaces are used to specify IP addresses that can be monitored by a listen port. Defining an interface gives you greater control over the IP addresses that will be monitored."
  },
  {
    "name": "JDBC Connection",
    "description": "JDBC connections allow the Gateway to query external databases and then use the query results during policy consumption."
  },
  {
    "name": "JMS Destinations",
    "description": "A JMS destination is used to configure a connection to a JMS service. This is used for both inbound and outbound configurations."
  },
  {
    "name": "Listen Port",
    "description": "A listen port is a TCP port that \"listens\" for incoming messages that are then passed to the Gateway message processor."
  },
  {
    "name": "Log Sink Configuration",
    "description": "Since: 1.0.4: Log Sink Configurations defines where the Gateway pushes logs to."
  },
  {
    "name": "Policy",
    "description": "This resource is used to manage policies. These can be internal, global or other special purpose policies."
  },
  {
    "name": "Policy Alias",
    "description": "A policy alias allows a policy to appear in more than one folder in the Services and Policies list. The policy alias is a linked copy of the original policy."
  },
  {
    "name": "Policy Backed Service",
    "description": "Since: 1.0.2: Policy Backed Services allow for custom policies to be referred to from gateway processes."
  },
  {
    "name": "Policy Bundle Installer",
    "description": "Since: 1.0.1: This resource exposes the Policy Bundle Installer for no-GUI use cases (e.g. support auto provisioning scripting to install OAuth)."
  },
  {
    "name": "Private Key",
    "description": "This resource is used to manage private keys."
  },
  {
    "name": "Published Services",
    "description": "This resource is used to manage services."
  },
  {
    "name": "Resource Document",
    "description": "Resource documents are documents schema documents. They are either a dtd or an xml schema."
  },
  {
    "name": "Revocation Checking Policy",
    "description": "A revocation checking policy defines the strategies used by the Gateway to determine whether a certificate has been revoked."
  },
  {
    "name": "Roles",
    "description": "A role defines a set of permissions that a user or group is allowed to perform. A user must be assigned to at least one of these roles in order to connect to the Gateway and perform administrative tasks in the Policy Manager or through the API."
  },
  {
    "name": "Sample Message",
    "description": "Since: 1.0.1: A sample message is a message to help configure assertions."
  },
  {
    "name": "Scheduled Task",
    "description": "Since: 1.0.2: Scheduled tasks allow the Gateway to schedule policy consumption."
  },
  {
    "name": "Secure Passwords",
    "description": "Secure passwords are used to securely store passwords and plain text PEM private keys in the Gateway database."
  },
  {
    "name": "Security Zones",
    "description": "Security zones are used to partition the Gateway into portions that can then be managed by other users. A security zone is a collection of related entities (for example: services, policies, folders, trusted certificates)."
  },
  {
    "name": "Server Module File",
    "description": "Since: 1.0.2: A ServerModuleFile represents a Modular or a Custom Assertion(s) Module."
  },
  {
    "name": "Service Alias",
    "description": "A service alias allows a service to appear in more than one folder in the Services and Policies list. The service alias is a linked copy of the original service."
  },
  {
    "name": "SiteMinder Configuration",
    "description": "A SiteMinder Configuration describes a connection to site minder."
  },
  {
    "name": "Solution Kits",
    "description": "Since: 1.0.2; This resource is used to list Solution Kits installed on the Gateway."
  },
  {
    "name": "Solution Kit Manager",
    "description": "Since: 1.0.2 :This resource exposes the Solution Kit Manager for no-GUI use cases (e.g. support auto provisioning scripting to upload and manage a .skar file).  To interact with this resource use a tool like Advanced Rest Client (for Chrome) or cURL. Note the Solution Kit ID is the GUID provided in SolutionKit.xml."
  },
  {
    "name": "User",
    "description": "A user represents a user identity in an identity provider. When no identity provider is specified in the url then the internal identity provider is assumed. Users can only be created and updated in the internal identity provider."
  },
  {
    "name": "Work Queue",
    "description": "Since: 1.0.2: Work Queue is a per-node-in-memory queue that holds policy fragments for asynchronous execution."
  }

  ],
  "security": [{
    "simple": []
  }],
  "securityDefinitions": {
    "simple": {
      "type": "basic"
    }
  },
  "schemes": ["https"],
  "consumes": ["application/xml"],
  "produces": ["application/xml"],
  "paths": {

    "/1.0/activeConnectors": {
      "get": {
        "tags": ["Active Connectors"],
        "description": "<p>Returns a list of active connectors. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/activeConnectors?name=MySFTPPollingListener</pre></div>\n <p>Returns active connector with name \"MySFTPPollingListener\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/activeConnectors?type=SFTP&name=MySFTPPollingListener&name=MyOtherSFTPPollingListener</pre></div>\n <p>Returns active connector of SFTP type with name either \"MySFTPPollingListener\" or\n \"MyOtherSFTPPollingListener\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Active Connectors",
        "operationId": "ActiveConnectorsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                              ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "type",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Type filter"
        }, {
          "name": "hardwiredServiceId",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Service ID filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Active Connectors"],
        "description": "Creates a new active connector.\r\nCreate",
        "summary": "Create Active Connectors",
        "operationId": "ActiveConnectorsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/activeConnectors/{id}": {
      "get": {
        "tags": ["Active Connectors"],
        "description": "Returns an active connector with the given ID.\r\nGet",
        "summary": "List Active Connectors By ID",
        "operationId": "ActiveConnectorsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the active connector to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Active Connectors"],
        "description": "Creates or Updates an existing active connector. If an active connector with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Active Connectors By ID",
        "operationId": "ActiveConnectorsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the active connector to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Active Connectors"],
        "description": "Deletes an existing active connector.\r\nDelete",
        "summary": "Delete Active Connectors By ID",
        "operationId": "ActiveConnectorsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the active connector to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/activeConnectors/template": {
      "get": {
        "tags": ["Active Connectors"],
        "description": "Returns a template, which is an example active connector that can be used as a reference for what active\n connector objects should look like.\r\nTemplate",
        "summary": "Active Connectors Template",
        "operationId": "ActiveConnectorsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/assertionSecurityZones": {
      "get": {
        "tags": ["Assertion Security Zones"],
        "description": "<p>Returns a list of assertion security zones. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/assertionSecurityZones?name=com.l7tech.external.assertions.jdbcquery.JdbcQueryAssertion</pre></div>\n <p>Returns assertion security zone of the Jdbc Query Assertion. The name of the assertion security zone is the\n fully qualified name of the assertion.</p>\n <div class=\"code indent\"><pre>/restman/1.0/assertionSecurityZones?securityZone.id=0e028eafc5c66c3af755a2e470734948</pre></div>\n <p>Returns assertion security zones that have security zone ID \"0e028eafc5c66c3af755a2e470734948\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Assertion Security Zones",
        "operationId": "AssertionSecurityZonesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter. To list all assertions with no security zones applied use the\n                        default ID: 0000000000000000ffffffffffffffff"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/assertionSecurityZones/template": {
      "get": {
        "tags": ["Assertion Security Zones"],
        "description": "Returns a template, which is an example  assertion security zone that can be used as a reference for what\n assertion security zone objects should look like.\r\nTemplate",
        "summary": "Assertion Security Zones Template",
        "operationId": "AssertionSecurityZonesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/assertionSecurityZones/{name}": {
      "get": {
        "tags": ["Assertion Security Zones"],
        "description": "Returns the assertion security zone for the assertion with the given fully qualified name.\r\nGet",
        "summary": "List Assertion Security Zones By Name",
        "operationId": "AssertionSecurityZonesByNameGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Fully qualified name of the assertion"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Assertion Security Zones"],
        "description": "Updates an assertion security zone\r\nUpdate",
        "summary": "Update Assertion Security Zones By Name",
        "operationId": "AssertionSecurityZonesByNamePut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "name",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Fully qualified name of the assertion"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/auditConfiguration": {
      "get": {
        "tags": ["Audit Configuration"],
        "description": "<p>Returns a list of the single audit configuration.<p>\r\nList",
        "summary": "List All Audit Configuration",
        "operationId": "AuditConfigurationGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/auditConfiguration/default/dependencies": {
      "get": {
        "tags": ["Audit Configuration"],
        "description": "Returns the list of dependencies for this entity.\r\nGet Dependencies\r\nGet Dependencies",
        "summary": "List All Audit Configuration Default Dependencies",
        "operationId": "AuditConfigurationDefaultDependenciesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "level",
          "in": "query",
          "required": false,
          "default": -1,
          "type": "integer",
          "format": "int32",
          "description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\r\n1.0.1"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/auditConfiguration/default": {
      "get": {
        "tags": ["Audit Configuration"],
        "description": "Returns a audit configuration with the given ID.\r\nGet",
        "summary": "List Audit Configuration Default",
        "operationId": "AuditConfigurationDefaultGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Audit Configuration"],
        "description": "Updates an existing AuditConfiguration.\n will be created, otherwise the existing one will be updated.\r\nUpdate",
        "summary": "Create or Update Audit Configuration Default",
        "operationId": "AuditConfigurationDefaultPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/auditConfiguration/template": {
      "get": {
        "tags": ["Audit Configuration"],
        "description": "Returns a template, which is an example AuditConfiguration that can be used as a reference for what AuditConfiguration objects should\n look like.\r\nTemplate",
        "summary": "Audit Configuration Template",
        "operationId": "AuditConfigurationTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/bundle": {
      "get": {
        "tags": ["Bundle"],
        "description": "Returns the bundle for the given resources. This API call is capable of returning a bundle created from multiple\n resources.\r\nExport Bundle",
        "summary": "Exports Bundle",
        "operationId": "BundleGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "defaultAction",
          "in": "query",
          "required": false,
          "enum": ["NewOrExisting", "NewOrUpdate", "Ignore"],
          "default": "NewOrExisting",
          "type": "string",
          "description": "Default bundling action. By default this is NewOrExisting"
        }, {
          "name": "exportGatewayRestManagementService",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "If true the gateway management service will be exported too. False by\n                                            default."
        }, {
          "name": "activeConnector",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Active Connectors to export\r\n1.0.2"
        }, {
          "name": "cassandraConnection",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Cassandra Connections to export\r\n1.0.2"
        }, {
          "name": "trustedCertificate",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Trusted Certificates to export\r\n1.0.2"
        }, {
          "name": "clusterProperty",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Cluster properties to export\r\n1.0.2"
        }, {
          "name": "customKeyValue",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Custom Key Values to export\r\n1.0.2"
        }, {
          "name": "emailListener",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Email listeners to export\r\n1.0.2"
        }, {
          "name": "encapsulatedAssertion",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Encapsulated Assertions to export\r\n1.0.2"
        }, {
          "name": "firewallRule",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Firewall rules to export\r\n1.0.2"
        }, {
          "name": "folder",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Folders to export"
        }, {
          "name": "genericEntity",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Generic entities to export\r\n1.0.2"
        }, {
          "name": "httpConfiguration",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Http Configurations to export\r\n1.0.2"
        }, {
          "name": "identityProvider",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Identity providers to export\r\n1.0.2"
        }, {
          "name": "interfaceTag",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Interface Tags to export\r\n1.0.2"
        }, {
          "name": "jdbcConnection",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "JDBC Connections to export\r\n1.0.2"
        }, {
          "name": "jmsDestination",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "JMS Destinations to Export\r\n1.0.2"
        }, {
          "name": "listenPort",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Listen Ports to export\r\n1.0.2"
        }, {
          "name": "policy",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Policies to export"
        }, {
          "name": "policyAlias",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Policy Aliases to export\r\n1.0.2"
        }, {
          "name": "policyBackedService",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Policy Backed Services to export\r\n1.0.2"
        }, {
          "name": "privateKey",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Private Keys to export\r\n1.0.2"
        }, {
          "name": "service",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Services to export"
        }, {
          "name": "serviceAlias",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Service Aliases to export\r\n1.0.2"
        }, {
          "name": "resource",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Resources to export\r\n1.0.2"
        }, {
          "name": "revocationCheckingPolicy",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Revocation Checking Policies to export\r\n1.0.2"
        }, {
          "name": "role",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Roles to export\r\n1.0.2"
        }, {
          "name": "sampleMessage",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Sample Messages to export\r\n1.0.2"
        }, {
          "name": "scheduledTask",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Scheduled Tasks to export\r\n1.0.2"
        }, {
          "name": "password",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Passwords to export\r\n1.0.2"
        }, {
          "name": "securityZone",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security Zones to export\r\n1.0.2"
        }, {
          "name": "serverModuleFile",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Server Modules Files to export\r\n1.0.2"
        }, {
          "name": "siteMinderConfiguration",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Siteminder Configurations to export\r\n1.0.2"
        }, {
          "name": "workQueue",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Work Queues to export\r\n1.0.2"
        }, {
          "name": "logSink",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Log Sinks to export\r\n1.0.4"
        }, {
          "name": "requireActiveConnector",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Active Connectors as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireCassandraConnection",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Cassandra Connections as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireTrustedCertificate",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Trusted Certificates as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireClusterProperty",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Cluster properties as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireCustomKeyValue",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Custom Key Values as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireEmailListener",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Email listeners as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireEncapsulatedAssertion",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Encapsulated Assertions as required in the bundle (does\n                                            not export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireFirewallRule",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Firewall rules as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireFolder",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Folders as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireGenericEntity",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Generic entities as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireHttpConfiguration",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Http Configurations as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireIdentityProvider",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Identity providers as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireInterfaceTag",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Interface Tags as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireJdbcConnection",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these JDBC Connections as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireJmsDestination",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these JMS Destinations as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireListenPort",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Listen Ports as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requirePolicy",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Policies as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requirePolicyAlias",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Policy Aliases as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requirePolicyBackedService",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Policy Backed Services as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requirePrivateKey",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Private Keys as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireService",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Services as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireServiceAlias",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Service Aliases as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireResource",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Resources as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireRevocationCheckingPolicy",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Revocation Checking Policies as required in the bundle\n                                            (does not export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireRole",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Roles as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireSampleMessage",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Sample Messages as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireScheduledTask",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Scheduled Tasks as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requirePassword",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Passwords as required in the bundle (does not export their\n                                            dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireSecurityZone",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Security Zones as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireServerModuleFile",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Server Modules Files as required in the bundle (does not\n                                            export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireSiteMinderConfiguration",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Siteminder Configurations as required in the bundle (does\n                                            not export their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireWorkQueue",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Work Queues as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "requireSolutionKit",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Marks these Solution Kits as required in the bundle (does not export\n                                            their dependencies and FailOnNew is set to true)\r\n1.0.2"
        }, {
          "name": "all",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export the full gateway. False by default\r\n1.0.1"
        }, {
          "name": "includeDependencies",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export with dependencies. False by default\r\n1.0.1"
        }, {
          "name": "includeSolutionKits",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export with Solution Kit entities (i.e. Solution Kit entities\n                                            them self and not the entities owned by Solution Kits). False by default.\n                                            Valid only on full Gateway export (i.e. if fullGateway is True)\r\n1.0.2"
        }, {
          "name": "encryptSecrets",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export with encrypted secrets. False by default.\r\n1.0.1"
        }, {
          "name": "encryptUsingClusterPassphrase",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to use the cluster passphrase if encrypting secrets. False by\n                                            default.\r\n1.0.1"
        }, {
          "name": "L7-key-passphrase",
          "in": "header",
          "required": false,
          "type": "string",
          "description": "The optional base-64 encoded passphrase to use for the encryption key\n                                            when encrypting secrets.\r\n1.0.1"
        }, {
          "name": "encassAsPolicyDependency",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to include the encapsulated assertion entities when exporting policies.\r\n1.0.3"
        }, {
          "name": "includeOnlyServicePolicy",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export only service policy. False by default.\r\n1.0.3"
        }, {
          "name": "includeOnlyDependencies",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export only dependencies. False by default.\r\n1.0.3"
        }, {
          "name": "includeGatewayConfiguration",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to include gateway configurations. Includes audit configuration. False by default.\r\n1.0.4"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Bundle"],
        "description": "This will import a bundle.\r\nImport Bundle",
        "summary": "Imports Bundle",
        "operationId": "BundlePut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "test",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "If true the bundle import will be tested no changes will be made to the gateway"
        }, {
          "name": "activate",
          "in": "query",
          "required": false,
          "default": true,
          "type": "boolean",
          "description": "False to not activate the updated services and policies."
        }, {
          "name": "versionComment",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "The comment to set for updated/created services and policies"
        }, {
          "name": "L7-key-passphrase",
          "in": "header",
          "required": false,
          "type": "string",
          "description": "The optional base-64 encoded passphrase to use for the encryption key when\n                             encrypting passwords.\r\n1.0.1"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/bundle/batch": {
      "put": {
        "tags": ["Bundle"],
        "description": "This will import a batch of bundles.\r\nImport Bundles\r\n1.0.4",
        "summary": "Imports Batch of Bundles",
        "operationId": "BundleBatchPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "test",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "If true the bundles import will be tested no changes will be made to the gateway"
        }, {
          "name": "activate",
          "in": "query",
          "required": false,
          "default": true,
          "type": "boolean",
          "description": "False to not activate the updated services and policies."
        }, {
          "name": "versionComment",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "The comment to set for updated/created services and policies"
        }, {
          "name": "L7-key-passphrase",
          "in": "header",
          "required": false,
          "type": "string",
          "description": "The optional base-64 encoded passphrase to use for the encryption key when\n                             encrypting passwords.\r\n1.0.1"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/bundle/{resourceType}/{id}": {
      "get": {
        "tags": ["Bundle"],
        "description": "Returns the bundle for the given resource type. The resource type is either a policy, service, or folder\r\nExport Folder Service Or Policy Bundle\r\nFolder, Service or Policy Export",
        "summary": "Exports Bundle By Resource Type And ID",
        "operationId": "BundleByResourceTypeAndIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "resourceType",
          "in": "path",
          "required": true,
          "enum": ["folder", "policy", "service"],

          "type": "string",
          "description": "Resource type. Either folder, service or policy"
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the resource to bundle"
        }, {
          "name": "defaultAction",
          "in": "query",
          "required": false,
          "enum": ["NewOrExisting", "NewOrUpdate", "Ignore"],
          "default": "NewOrExisting",
          "type": "string",
          "description": "Default bundling action. By default this is NewOrExisting"
        }, {
          "name": "defaultMapBy",
          "in": "query",
          "required": false,
          "enum": ["id", "name", "guid"],
          "default": "id",
          "type": "string",
          "description": "Default map by action."
        }, {
          "name": "includeRequestFolder",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "For a folder export, specifies whether to include the folder in the\n                                           bundle or just its contents."
        }, {
          "name": "exportGatewayRestManagementService",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "If true the gateway management service will be exported too. False by\n                                           default."
        }, {
          "name": "includeDependencies",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export with dependencies. False by default\r\n1.0.1"
        }, {
          "name": "encryptSecrets",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export with encrypted secrets. False by default.\r\n1.0.1"
        }, {
          "name": "encryptUsingClusterPassphrase",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to use the cluster passphrase if encrypting secrets. False by\n                                           default\r\n1.0.1"
        }, {
          "name": "L7-key-passphrase",
          "in": "header",
          "required": false,
          "type": "string",
          "description": "The optional base-64 encoded passphrase to use for the encryption key\n                                           when encrypting secrets.\r\n1.0.1"
        }, {
          "name": "includeOnlyServicePolicy",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export only service policy. False by default.\r\n1.0.3"
        }, {
          "name": "includeOnlyDependencies",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "True to export only dependencies. False by default.\r\n1.0.3"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/cassandraConnections": {
      "get": {
        "tags": ["Cassandra Connection "],
        "description": "<p>Returns a list of Cassandra connections. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/cassandraConnections?name=MyCassandraConnection</pre></div>\n <p>Returns Cassandra connection with name \"MyCassandraConnection\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Cassandra Connections",
        "operationId": "CassandraConnectionsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "keyspace",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Keyspace filter"
        }, {
          "name": "contactPoint",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Contact point filter"
        }, {
          "name": "port",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Port filter"
        }, {
          "name": "username",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "User name filter"
        }, {
          "name": "compression",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Compression filter"
        }, {
          "name": "ssl",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "SSL filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Cassandra Connection "],
        "description": "Creates a new Cassandra connection\r\nCreate",
        "summary": "Create Cassandra Connections",
        "operationId": "CassandraConnectionsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/cassandraConnections/{id}": {
      "get": {
        "tags": ["Cassandra Connection "],
        "description": "Returns a Cassandra connection with the given ID.\r\nGet",
        "summary": "List Cassandra Connections By ID",
        "operationId": "CassandraConnectionsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the Cassandra connection to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Cassandra Connection "],
        "description": "Creates or Updates an existing Cassandra connection. If a Cassandra connection with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Cassandra Connections By ID",
        "operationId": "CassandraConnectionsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the Cassandra connection to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Cassandra Connection "],
        "description": "Deletes an existing Cassandra connection.\r\nDelete",
        "summary": "Delete Cassandra Connections By ID",
        "operationId": "CassandraConnectionsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the Cassandra connection to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/cassandraConnections/template": {
      "get": {
        "tags": ["Cassandra Connection "],
        "description": "Returns a template, which is an example Cassandra connection that can be used as a reference for what Cassandra connection\n objects should look like.\r\nTemplate",
        "summary": "Cassandra Connections Template",
        "operationId": "CassandraConnectionsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/trustedCertificates": {
      "get": {
        "tags": ["Certificate"],
        "description": "<p>Returns a list of certificates. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/trustedCertificates?name=MyCertificate</pre></div>\n <p>Returns certificates with name \"MyCertificate\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List Trusted Certificates",
        "operationId": "TrustedCertificatesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Certificate"],
        "description": "Creates a new certificate\r\nCreate",
        "summary": "Create Trusted Certificates",
        "operationId": "TrustedCertificatesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/trustedCertificates/template": {
      "get": {
        "tags": ["Certificate"],
        "description": "Returns a template, which is an example certificate that can be used as a reference for what certificate objects should look like.\r\nTemplate",
        "summary": "Trusted Certificates Template",
        "operationId": "TrustedCertificatesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/trustedCertificates/{id}": {
      "get": {
        "tags": ["Certificate"],
        "description": "Retrieves a certificate.\r\nGet",
        "summary": "List Trusted Certificates By ID",
        "operationId": "TrustedCertificatesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the certificate to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Certificate"],
        "description": "Creates or Updates an existing certificate. If a certificate with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Trusted Certificates By Id",
        "operationId": "TrustedCertificatesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the certificate to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Certificate"],
        "description": "Deletes an existing certificate.\r\nDelete",
        "summary": "Delete Trusted Certificates By ID",
        "operationId": "TrustedCertificatesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the certificate to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/clusterProperties": {
      "get": {
        "tags": ["Cluster Properties"],
        "description": "<p>Returns a list of cluster properties. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/clusterProperties?name=MyProperty</pre></div>\n <p>Returns cluster property with name \"MyProperty\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Cluster Properties",
        "operationId": "ClusterPropertiesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Cluster Properties"],
        "description": "Creates a new cluster property.\r\nCreate",
        "summary": "Create Cluster Properties",
        "operationId": "ClusterPropertiesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/clusterProperties/{id}": {
      "get": {
        "tags": ["Cluster Properties"],
        "description": "Returns a cluster property with the given ID.\r\nGet",
        "summary": "List Cluster Properties By ID",
        "operationId": "ClusterPropertiesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the cluster property to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Cluster Properties"],
        "description": "Creates or Updates an existing cluster property. If a cluster property with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Cluster Properties By ID",
        "operationId": "ClusterPropertiesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the cluster property to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Cluster Properties"],
        "description": "Deletes an existing cluster property.\r\nDelete",
        "summary": "Delete Cluster Properties By ID",
        "operationId": "ClusterPropertiesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the cluster property to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/clusterProperties/template": {
      "get": {
        "tags": ["Cluster Properties"],
        "description": "Returns a template, which is an example cluster property that can be used as a reference for what cluster\n property objects should look like.\r\nTemplate",
        "summary": "Cluster Properties Template",
        "operationId": "ClusterPropertiesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/customKeyValues": {
      "get": {
        "tags": ["Custom Key Value Store"],
        "description": "<p>Returns a list of custom key values. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/customKeyValues?key=MyKey</pre></div>\n <p>Returns custom key value with key \"MyKey\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Custom Key Values",
        "operationId": "CustomKeyValuesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
        }, {
          "name": "key",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Key filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Custom Key Value Store"],
        "description": "Creates a new custom key value.\r\nCreate",
        "summary": "Create Custom Key Values",
        "operationId": "CustomKeyValuesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/customKeyValues/{id}": {
      "get": {
        "tags": ["Custom Key Value Store"],
        "description": "Returns a custom key value with the given ID.\r\nGet",
        "summary": "List Custom Key Values By ID",
        "operationId": "CustomKeyValuesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the custom key value to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Custom Key Value Store"],
        "description": "Creates or Updates an existing custom key value. If a custom key value with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Custom Key Values By ID",
        "operationId": "CustomKeyValuesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the custom key value to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Custom Key Value Store"],
        "description": "Deletes an existing custom key value.\r\nDelete",
        "summary": "Delete Custom Key Values By ID",
        "operationId": "CustomKeyValuesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the custom key value to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/customKeyValues/template": {
      "get": {
        "tags": ["Custom Key Value Store"],
        "description": "Returns a template, which is an example custom key value that can be used as a reference for what custom key\n value objects should look like.\r\nTemplate",
        "summary": "Custom Key Values Template",
        "operationId": "CustomKeyValuesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/emailListeners": {
      "get": {
        "tags": ["Email Listeners"],
        "description": "<p>Returns a list of email listeners. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/emailListeners?name=MyEmailListener</pre></div>\n <p>Returns email listener with name \"MyEmailListener\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/emailListeners?serverTypes=IMAP</pre></div>\n <p>Returns email listeners of IMAP type</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Email Listeners",
        "operationId": "EmailListenersGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name", "host", "serverType"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "active",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Active filter"
        }, {
          "name": "serverType",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Server type filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Email Listeners"],
        "description": "Creates a new email listener\r\nCreate",
        "summary": "Create Email Listeners",
        "operationId": "EmailListenersPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/emailListeners/{id}": {
      "get": {
        "tags": ["Email Listeners"],
        "description": "Returns an email listener with the given ID.\r\nGet",
        "summary": "List Email Listeners By ID",
        "operationId": "EmailListenersByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the email listener to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Email Listeners"],
        "description": "Creates or Updates an existing email listener. If an email listener with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Email Listeners By ID",
        "operationId": "EmailListenersByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the email listener to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Email Listeners"],
        "description": "Deletes an existing email listener.\r\nDelete",
        "summary": "Delete Email Listeners By ID",
        "operationId": "EmailListenersByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the email listener to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/emailListeners/template": {
      "get": {
        "tags": ["Email Listeners"],
        "description": "Returns a template, which is an example email listener that can be used as a reference for what email listener\n objects should look like.\r\nTemplate",
        "summary": "Email Listeners Template",
        "operationId": "EmailListenersTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/encapsulatedAssertions": {
      "get": {
        "tags": ["Encapsulated Assertion"],
        "description": "<p>Returns a list of encapsulated assertions. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/activeConnectors?name=MyEncass</pre></div>\n <p>Returns encapsulated assertion with name \"MyEncass\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List Encapsulated Assertions",
        "operationId": "EncapsulatedAssertionsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "policy.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Policy id filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Encapsulated Assertion"],
        "description": "Creates a new encapsulated assertion\r\nCreate",
        "summary": "Create Encapsulated Assertions",
        "operationId": "EncapsulatedAssertionsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/encapsulatedAssertions/template": {
      "get": {
        "tags": ["Encapsulated Assertion"],
        "description": "Returns a template, which is an example encapsulated assertion that can be used as a reference for what\n encapsulated assertion objects should look like.\r\nTemplate",
        "summary": "Encapsulated Assertions Template",
        "operationId": "EncapsulatedAssertionsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/encapsulatedAssertions/{id}": {
      "get": {
        "tags": ["Encapsulated Assertion"],
        "description": "Returns an encapsulated assertion with the given ID.\r\nGet",
        "summary": "List Encapsulated Assertions By ID",
        "operationId": "EncapsulatedAssertionsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the encapsulated assertion to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Encapsulated Assertion"],
        "description": "Creates or Updates an existing encapsulated assertion. If an encapsulated assertion with the given ID does not\n exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Encapsulated Assertions By ID",
        "operationId": "EncapsulatedAssertionsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the encapsulated assertion to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Encapsulated Assertion"],
        "description": "Deletes an existing encapsulated assertion.\r\nDelete",
        "summary": "Delete Encapsulated Assertions By ID",
        "operationId": "EncapsulatedAssertionsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the encapsulated assertion to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/encapsulatedAssertions/{id}/dependencies": {
      "get": {
        "tags": ["Encapsulated Assertion"],
        "description": "Returns the list of dependencies for this entity.\r\nGet Dependencies\r\nGet Dependencies",
        "summary": "List Encapsulated Assertions Dependencies By ID",
        "operationId": "EncapsulatedAssertionsDependenciesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }, {
          "name": "level",
          "in": "query",
          "required": false,
          "default": -1,
          "type": "integer",
          "format": "int32",
          "description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\r\n1.0.1"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/firewallRules": {
      "get": {
        "tags": ["Firewall Rule"],
        "description": "<p>Returns a list of firewall rules. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/firewallRules?name=MyFirewallRule</pre></div>\n <p>Returns firewall rule with name \"MyFirewallRule\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Firewall Rules",
        "operationId": "FirewallRulesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name", "enabled", "ordinal"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "ordinal",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Ordinal filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Firewall Rule"],
        "description": "Creates a new firewall rule\r\nCreate",
        "summary": "Create Firewall Rules",
        "operationId": "FirewallRulesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/firewallRules/{id}": {
      "get": {
        "tags": ["Firewall Rule"],
        "description": "Returns a firewall rule with the given ID.\r\nGet",
        "summary": "List Firewall Rules By ID",
        "operationId": "FirewallRulesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the firewall rule to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Firewall Rule"],
        "description": "Creates or Updates an existing firewall rule. If a firewall rule with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate",
        "summary": "Create Firewall Rules By ID",
        "operationId": "FirewallRulesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the firewall rule to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Firewall Rule"],
        "description": "Deletes an existing firewall rule.\r\nDelete",
        "summary": "Delete Firewall Rules By ID",
        "operationId": "FirewallRulesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the firewall rule to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/firewallRules/template": {
      "get": {
        "tags": ["Firewall Rule"],
        "description": "Returns a template, which is an example firewall rule that can be used as a reference for what firewall rule objects\n should look like.\r\nTemplate",
        "summary": "Firewall Rules Template",
        "operationId": "FirewallRulesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/folders": {
      "get": {
        "tags": ["Folders"],
        "description": "<p>Returns a list of folders. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/folders?name=MyFolder</pre></div>\n <p>Returns folder with name \"MyFolder\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Folders",
        "operationId": "FoldersGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],
          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "parentFolder.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The parent folder filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Folders"],
        "description": "Creates a new folder\r\nCreate",
        "summary": " Create a New Folder",
        "operationId": "FoldersPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/folders/template": {
      "get": {
        "tags": ["Folders"],
        "description": "Returns a template, which is an example folder that can be used as a reference for what folder objects should\n look like.\r\nTemplate",
        "summary": "Folders Template",
        "operationId": "FoldersTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/folders/{id}": {
      "get": {
        "tags": ["Folders"],
        "description": "Returns a folder with the given ID.\r\nGet",
        "summary": "List Folders By ID",
        "operationId": "FoldersByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the folder to return"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Folders"],
        "description": "Creates or Updates an existing folder. If a folder with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Creates or Updates Folders By ID",
        "operationId": "FoldersByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the folder to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Folders"],
        "description": "Deletes an existing folder.\r\nDelete",
        "summary": "Deletes Folders By ID",
        "operationId": "FoldersByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The id of the folder to delete."
        }, {
          "name": "force",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "If true, deletes folder and its contents"
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/folders/{id}/dependencies": {
      "get": {
        "tags": ["Folders"],
        "description": "Returns the list of dependencies for this entity.\r\nGet Dependencies\r\nGet Dependencies",
        "summary": "List Folders Dependencies By ID",
        "operationId": "FoldersDependenciesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }, {
          "name": "level",
          "in": "query",
          "required": false,
          "default": -1,
          "type": "integer",
          "format": "int32",
          "description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\r\n1.0.1"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/genericEntities": {
      "get": {
        "tags": ["Generic Entities"],
        "description": "<p>Returns a list of generic entities. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/activeConnectors?name=MyGenericEntity</pre></div>\n <p>Returns generic entity with name \"MyGenericEntity\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Generic Entities",
        "operationId": "GenericEntitiesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name", "entityClassName"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],
          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                         ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "entityClassName",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Entity class name filter"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      },
      "post": {
        "tags": ["Generic Entities"],
        "description": "Creates a new generic entity.",
        "summary": "Create a Generic Entities",
        "operationId": "GenericEntitiesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      }
    },
    "/1.0/genericEntities/{id}": {
      "get": {
        "tags": ["Generic Entities"],
        "description": "Retrieves a generic entity given its ID",
        "summary": "List Generic Entities By Id",
        "operationId": "GenericEntitiesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the generic entity to retrieve"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      },
      "put": {
        "tags": ["Generic Entities"],
        "description": "Creates or Updates an existing generic entity. If a generic entity with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update GenericEntities By ID",
        "operationId": "GenericEntitiesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the generic entity to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      },
      "delete": {
        "tags": ["Generic Entities"],
        "description": "Deletes an existing generic entity.\r\nDelete",
        "summary": "Delete Generic Entities By ID",
        "operationId": "GenericEntitiesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the generic entity to delete."
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [{
          "simple": []
        }]
      }
    },
    "/1.0/genericEntities/template": {
      "get": {
        "tags": ["Generic Entities"],
        "description": "Returns a template, which is an example generic entity that can be used as a reference for what generic entity\n objects should look like.\r\nTemplate",
        "summary": "Generic Entities Template",
        "operationId": "GenericEntitiesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      }
    },

    "/1.0/groups": {
      "get": {
        "tags": ["Group"],
        "description": "<p>Returns a list of groups. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList Groups",
        "summary": "List All Groups",
        "operationId": "GroupsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/groups/{groupID}": {
      "get": {
        "tags": ["Group"],
        "description": "Returns a group with the given ID.\r\nGet Group",
        "summary": "List Groups By GroupID",
        "operationId": "GroupsByGroupIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "groupID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the group to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/groups/template": {
      "get": {
        "tags": ["Group"],
        "description": "Returns a template, which is an example group that can be used as a reference for what group objects should look\n like.\r\nGroup Template",
        "summary": "Groups Template",
        "operationId": "GroupsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/httpConfigurations": {
      "get": {
        "tags": ["Http Configurations"],
        "description": "<p>Returns a list of HTTP configurations. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/httpConfigurations?name=MyHTTPConfiguration</pre></div>\n <p>Returns HTTP configuration with name \"MyHTTPConfiguration\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List Http Configurations",
        "operationId": "HttpConfigurationsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "host"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],
          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "host",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "protocol",
          "in": "query",
          "required": false,
          "enum": ["HTTP", "HTTPS"],
          "type": "string",
          "description": "Protocol filter"
        }, {
          "name": "ntlmHost",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "NtlmHost filter"
        }, {
          "name": "ntlmDomain",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "NtlmDomain id filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Http Configurations"],
        "description": "Creates a new HTTP configuration.\r\nCreate",
        "summary": "Create Http Configurations",
        "operationId": "HttpConfigurationsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/httpConfigurations/template": {
      "get": {
        "tags": ["Http Configurations"],
        "description": "Returns a template, which is an example HTTP configuration that can be used as a reference for what HTTP\n configuration objects should look like.\r\nTemplate",
        "summary": "Http Configurations Template",
        "operationId": "HttpConfigurationsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/httpConfigurations/{id}": {
      "get": {
        "tags": ["Http Configurations"],
        "description": "Returns an HTTP configuration with the given ID.\r\nGet",
        "summary": "List Http Configurations By ID",
        "operationId": "HttpConfigurationsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the HTTP configuration to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Http Configurations"],
        "description": "Creates or Updates an existing HTTP configuration. If an HTTP configuration with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate",
        "summary": "Create or Update Http Configurations By ID",
        "operationId": "HttpConfigurationsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the HTTP configuration to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Http Configurations"],
        "description": "Deletes an existing HTTP configuration.\r\nDelete",
        "summary": "Delete Http Configurations By ID",
        "operationId": "HttpConfigurationsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the HTTP configuration to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/identityProviders": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "<p>Returns a list of identity providers. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/identityProviders?name=MyIDProvider</pre></div>\n <p>Returns identity provider with name \"MyIDProvider\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/identityProviders?type=LDAP</pre></div>\n <p>Returns identity providers of LDAP type</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Identity Providers",
        "operationId": "IdentityProvidersGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name", "type"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],
          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "type",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Type filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Identity Providers"],
        "description": "Creates an identity provider\r\nCreate",
        "summary": "Create an Identity Providers",
        "operationId": "IdentityProvidersPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/template": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "Returns a template, which is an example identity provider that can be used as a reference for what identity\n provider objects should look like.\r\nTemplate",
        "summary": "Identity Providers Template",
        "operationId": "IdentityProvidersTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "Returns an identity provider with the given ID.\r\nGet",
        "summary": "List Identity Providers By Identity Provider ID",
        "operationId": "IdentityProvidersByIdentityProviderIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the identity provider to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Identity Providers"],
        "description": "Creates or Updates an existing identity provider. If an identity provider with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Identity Providers By Identity Provider ID",
        "operationId": "IdentityProvidersByIdentityProviderIDPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the identity provider to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Identity Providers"],
        "description": "Deletes an existing identity provider.\r\nDelete",
        "summary": "Delete Identity Providers By Identity Provider ID",
        "operationId": "IdentityProvidersByIdentityProviderIDDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the identity provider to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}/groups": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "<p>Returns a list of groups. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList Groups",
        "summary": "List All Identity Providers Groups",
        "operationId": "IdentityProvidersGroupsByIdentityProviderIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }, {
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}/groups/template": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "Returns a template, which is an example group that can be used as a reference for what group objects should look\n like.\r\nGroup Template",
        "summary": " Identity Providers Groups Template",
        "operationId": "IdentityProvidersGroupsTemplateByIdentityProviderIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}/groups/{groupID}": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "Returns a group with the given ID.\r\nGet Group",
        "summary": "List Identity Providers Groups By ID",
        "operationId": "IdentityProvidersGroupsByIdentityProviderIDAndGroupIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "groupID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the group to return"
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}/users": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "<p>Returns a list of users. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList Users",
        "summary": "List All Identity Providers Users",
        "operationId": "IdentityProvidersUsersByIdentityProviderIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }, {
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "login"],
          "type": "string",
          "description": "Key to sort the list by."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n               ascending if not specified"
        }, {
          "name": "login",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Login filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Identity Providers"],
        "description": "Creates a new user. New users can only be created on the internal identity provider.\r\nCreate User",
        "summary": "Creates New Identity Providers Users",
        "operationId": "IdentityProvidersUsersByIdentityProviderIDPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}/users/{userID}/password": {
      "put": {
        "tags": ["Identity Providers"],
        "description": "Change this user's password\r\nChange User Password",
        "summary": "Update Identity Providers Users Password",
        "operationId": "IdentityProvidersUsersPasswordByIdentityProviderIDAndUserIDPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }, {
          "name": "format",
          "in": "query",
          "required": false,
          "default": "plain",
          "type": "string",
          "description": "The format of the password. \"plain\" or \"sha512crypt\""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}/users/template": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "Returns a template, which is an example user that can be used as a reference for what user objects should look\n like.\r\nTemplate User",
        "summary": "Identity Providers Users Template",
        "operationId": "IdentityProvidersUsersTemplateByIdentityProviderIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}/users/{userID}": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "Returns a user with the given ID.\r\nGet User",
        "summary": "List Identity Providers Users By ID",
        "operationId": "IdentityProvidersUsersByIdentityProviderIDAndUserIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user to return"
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Identity Providers"],
        "description": "Updates an existing user\r\nUpdate User",
        "summary": "Update Identity Providers Users By ID",
        "operationId": "IdentityProvidersUsersByIdentityProviderIDAndUserIDPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user to update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Identity Providers"],
        "description": "Deletes an existing user\r\nDelete User",
        "summary": "Delete Identity Providers Users By ID",
        "operationId": "IdentityProvidersUsersByIdentityProviderIDAndUserIDDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user to delete."
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/identityProviders/{identityProviderID}/users/{userID}/certificate": {
      "get": {
        "tags": ["Identity Providers"],
        "description": "Gets the user's certificate\r\nGet User Certificate",
        "summary": "List Identity Providers Users Certificate By ID",
        "operationId": "IdentityProvidersUsersCertificateByIdentityProviderIDAndUserIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user"
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Identity Providers"],
        "description": "Set this user's certificate\r\nSet User Certificate",
        "summary": "Set Identity Providers Users Certificate By ID",
        "operationId": "IdentityProvidersUsersCertificateByIdentityProviderIDAndUserIDPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Identity Providers"],
        "description": "Removes the certificate from the user\r\nDelete User Certificate",
        "summary": "Delete Identity Providers Users Certificate By ID",
        "operationId": "IdentityProvidersUsersCertificateByIdentityProviderIDAndUserIDDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user"
        }, {
          "name": "identityProviderID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/interfaceTags": {
      "get": {
        "tags": ["Interface Tags"],
        "description": "Returns a list of interface tags. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/interfaceTags?name=MyInterface</pre></div>\n <p>Returns interface with name = \"MyInterface\"</p>\n <div class=\"code indent\"><pre>/restman/interfaceTags?name=MyInterface&name=MyInterfaceProd</pre></div>\n <p>Returns interfaces with name either \"MyInterface\" or \"MyInterfaceProd\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Interface Tags",
        "operationId": "InterfaceTagsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],
          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter. This will return interfaces with the specified names."
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      },
      "post": {
        "tags": ["Interface Tags"],
        "description": "Creates a new interface. In order to create a new interface tag you must have read and write access to cluster\n properties.\r\nCreate",
        "summary": "Create Interface Tags",
        "operationId": "InterfaceTagsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      }
    },
    "/1.0/interfaceTags/{id}": {
      "get": {
        "tags": ["Interface Tags"],
        "description": "Retrieves an interface tag given it's ID. In order to get an interface tag you must have read access to cluster\n properties.\r\nGet",
        "summary": "List Interface Tags By ID",
        "operationId": "InterfaceTagsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The identity of the interface tag to select"
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      },
      "put": {
        "tags": ["Interface Tags"],
        "description": "Updates an existing interface tag. You cannot change the name of an interface, you can only update its address\n patterns. In order to update an interface tag you must have read and write access to cluster properties.\r\nUpdate",
        "summary": " Update Interface Tags By ID",
        "operationId": "InterfaceTagsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the interface tag to update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      },
      "delete": {
        "tags": ["Interface Tags"],
        "description": "Deletes an existing interface tag.\r\nDelete",
        "summary": "Delete Interface Tags By ID",
        "operationId": "InterfaceTagsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the interface tag to delete."
        }],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [{
          "simple": []
        }]
      }
    },
    "/1.0/interfaceTags/template": {
      "get": {
        "tags": ["Interface Tags"],
        "description": "Returns a template, which is an example interface tag that can be used as a reference for what interface tag\n objects should look like.\r\nTemplate",
        "summary": "Interface Tags Template",
        "operationId": "InterfaceTagsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{
          "simple": []
        }]
      }
    },

    "/1.0/jdbcConnections": {
      "get": {
        "tags": ["JDBC Connection"],
        "description": "<p>Returns a list of JDBC connections. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/jdbcConnections?name=MyJDBCConnection</pre></div>\n <p>Returns JDBC connection with name \"MyJDBCConnection\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All JDBC Connections",
        "operationId": "JdbcConnectionsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "jdbcUrl",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "JDBC URL filter"
        }, {
          "name": "driverClass",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Driver class name filter"
        }, {
          "name": "userName",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "User name filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["JDBC Connection"],
        "description": "Creates a new JDBC connection\r\nCreate",
        "summary": "Create JDBC Connections",
        "operationId": "JdbcConnectionsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/jdbcConnections/{id}": {
      "get": {
        "tags": ["JDBC Connection"],
        "description": "Returns a JDBC connection with the given ID.\r\nGet",
        "summary": "List JDBC Connections By ID",
        "operationId": "JdbcConnectionsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the JDBC connection to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["JDBC Connection"],
        "description": "Creates or Updates an existing JDBC connection. If a JDBC connection with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create JDBC Connections By ID",
        "operationId": "JdbcConnectionsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the JDBC connection to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["JDBC Connection"],
        "description": "Deletes an existing JDBC connection.\r\nDelete",
        "summary": "Delete JDBC Connections By ID",
        "operationId": "JdbcConnectionsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the JDBC connection to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/jdbcConnections/template": {
      "get": {
        "tags": ["JDBC Connection"],
        "description": "Returns a template, which is an example JDBC connection that can be used as a reference for what JDBC connection\n objects should look like.\r\nTemplate",
        "summary": "JDBC Connections Template",
        "operationId": "JdbcConnectionsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/jmsDestinations": {
      "get": {
        "tags": ["JMS Destinations"],
        "description": "<p>Returns a list of JMS destinations. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/jmsDestinations?name=MyJMSDestination</pre></div>\n <p>Returns JMS destination with name \"MyJMSDestination\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All JMS Destinations",
        "operationId": "JmsDestinationsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "inbound",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Inbound filter"
        }, {
          "name": "template",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Template filter"
        }, {
          "name": "destination",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Destination filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["JMS Destinations"],
        "description": "Creates a new JMS destination\r\nCreate",
        "summary": "Create JMS Destinations",
        "operationId": "JmsDestinationsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/jmsDestinations/{id}": {
      "get": {
        "tags": ["JMS Destinations"],
        "description": "Returns an JMS destination with the given ID.\r\nGet",
        "summary": "List JMS Destinations By ID",
        "operationId": "JmsDestinationsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the JMS destination to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["JMS Destinations"],
        "description": "Creates or Updates an existing JMS destination. If an JMS destination with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update JMS Destinations By ID",
        "operationId": "JmsDestinationsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the JMS destination to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["JMS Destinations"],
        "description": "Deletes an existing JMS destination.\r\nDelete",
        "summary": "Delete JMS Destinations By ID",
        "operationId": "JmsDestinationsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the JMS destination to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/jmsDestinations/template": {
      "get": {
        "tags": ["JMS Destinations"],
        "description": "Returns a template, which is an example JMS destination that can be used as a reference for what JMS destination\n objects should look like.\r\nTemplate",
        "summary": "JMS Destinations Template",
        "operationId": "JmsDestinationsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/listenPorts": {
      "get": {
        "tags": ["Listen Port"],
        "description": "<p>Returns a list of listen ports. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/listenPorts?name=MyListenPort</pre></div>\n <p>Returns listen port with name \"MyListenPort\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Listen Ports",
        "operationId": "ListenPortsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "protocol",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Protocol filter"
        }, {
          "name": "port",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Port filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Listen Port"],
        "description": "Creates a new listen port\r\nCreate",
        "summary": "Create Listen Ports",
        "operationId": "ListenPortsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/listenPorts/{id}": {
      "get": {
        "tags": ["Listen Port"],
        "description": "Returns a listen port with the given ID.\r\nGet",
        "summary": "List Listen Ports By ID",
        "operationId": "ListenPortsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the listen port to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Listen Port"],
        "description": "Creates or Updates an existing listen port. If a listen port with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate",
        "summary": "Create Listen Ports By ID",
        "operationId": "ListenPortsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the listen port to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Listen Port"],
        "description": "Deletes an existing listen port.\r\nDelete",
        "summary": "Delete Listen Ports By ID",
        "operationId": "ListenPortsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the listen port to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/listenPorts/template": {
      "get": {
        "tags": ["Listen Port"],
        "description": "Returns a template, which is an example listen port that can be used as a reference for what listen port objects\n should look like.\r\nTemplate",
        "summary": "Listen Ports Template",
        "operationId": "ListenPortsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/logSinks": {
      "get": {
        "tags": ["Log Sink Configuration"],
        "description": "<p>Returns a list of Log Sink Configurations. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/LogSinks?name=MyLogSink</pre></div>\n <p>Returns Log Sink Configuration with name \"MyLogSink\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Log Sinks",
        "operationId": "LogSinksGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "type",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Type filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Description filter"
        }, {
          "name": "description",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Enabled filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Log Sink Configuration"],
        "description": "Creates a new Log Sink Configuration\r\nCreate",
        "summary": "Create Log Sinks",
        "operationId": "LogSinksPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/logSinks/template": {
      "get": {
        "tags": ["Log Sink Configuration"],
        "description": "Returns a template, which is an example Log Sink Configuration that can be used as a reference for what Log Sink Configuration\n objects should look like.\r\nTemplate",
        "summary": "Log Sinks Template",
        "operationId": "LogSinksTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/logSinks/{id}": {
      "get": {
        "tags": ["Log Sink Configuration"],
        "description": "Returns a Log Sink Configuration with the given ID.\r\nGet",
        "summary": "List Log Sinks By ID",
        "operationId": "LogSinksByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the Log Sink Configuration to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Log Sink Configuration"],
        "description": "Creates or Updates an existing Log Sink Configuration. If a Log Sink Configuration with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Log Sinks By ID",
        "operationId": "LogSinksByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the Log Sink Configuration to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Log Sink Configuration"],
        "description": "Deletes an existing Log Sink Configuration.\r\nDelete",
        "summary": "Delete Log Sinks By ID",
        "operationId": "LogSinksByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the Log Sink Configuration to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/logSinks/{id}/dependencies": {
      "get": {
        "tags": ["Log Sink Configuration"],
        "description": "Returns the list of dependencies for this entity.\r\nGet Dependencies\r\nGet Dependencies",
        "summary": "List Log Sinks Dependencies By ID",
        "operationId": "LogSinksDependenciesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }, {
          "name": "level",
          "in": "query",
          "required": false,
          "default": -1,
          "type": "integer",
          "format": "int32",
          "description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\r\n1.0.1"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/policies": {
      "get": {
        "tags": ["Policy"],
        "description": "<p>Returns a list of policies. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/policies?name=MyPolicy</pre></div>\n <p>Returns policy with name \"MyPolicy\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Policies",
        "operationId": "PoliciesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "guid",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Guid filter"
        }, {
          "name": "type",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Include", "Internal", "Global"]
          },
          "description": "Type filter"
        }, {
          "name": "soap",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Soap filter"
        }, {
          "name": "parentFolder.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parent folder ID filter."
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Policy"],
        "description": "Creates a new policy\r\nCreate",
        "summary": "Create Policies",
        "operationId": "PoliciesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "versionComment",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "The comment to add to the policy version when creating the policy"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/template": {
      "get": {
        "tags": ["Policy"],
        "description": "Returns a template, which is an example policy that can be used as a reference for what policy objects should\n look like.\r\nTemplate",
        "summary": "Policies Template",
        "operationId": "PoliciesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/{id}": {
      "get": {
        "tags": ["Policy"],
        "description": "Returns a policy with the given ID.\r\nGet",
        "summary": "List Policies By ID",
        "operationId": "PoliciesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the policy to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Policy"],
        "description": "Creates or Updates an existing policy. If a policy with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate Or Create",
        "summary": "Create or Update Policies By ID",
        "operationId": "PoliciesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the policy to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "active",
          "in": "query",
          "required": false,
          "default": true,
          "type": "boolean",
          "description": "Should the policy be activated after the update."
        }, {
          "name": "versionComment",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "The comment to add to the policy version when updating the policy"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Policy"],
        "description": "Deletes an existing policy.\r\nDelete",
        "summary": "Delte Policies By ID",
        "operationId": "PoliciesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the policy to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/{id}/versions": {
      "get": {
        "tags": ["Policy"],
        "description": "<p>Returns a list of policy versions. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList Versions",
        "summary": "List Policies Versions By ID",
        "operationId": "PoliciesVersionsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Id filter"
        }, {
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "version"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                 ascending if not specified"
        }, {
          "name": "active",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Active filter"
        }, {
          "name": "comment",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Comment filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/{id}/versions/{versionNumber}/activate": {
      "post": {
        "tags": ["Policy"],
        "description": "Activates the specified policy version\r\nActivate Version",
        "summary": "Policies Versions Activate By ID",
        "operationId": "PoliciesVersionsActivateByIdAndVersionNumberPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "versionNumber",
          "in": "path",
          "required": true,
          "type": "integer",
          "format": "int64",
          "description": "Version of the policy version to set active."
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/{id}/versions/{versionNumber}/comment": {
      "put": {
        "tags": ["Policy"],
        "description": "Sets the comment on a specific policy version.\r\nSet Version Comment",
        "summary": "Set Policies Versions Comment By ID",
        "operationId": "PoliciesVersionsCommentByIdAndVersionNumberPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "versionNumber",
          "in": "path",
          "required": true,
          "type": "integer",
          "format": "int64",
          "description": "Version of the policy version to set the comment on."
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/{id}/versions/active": {
      "get": {
        "tags": ["Policy"],
        "description": "Returns the active policy version.\r\nGet Active Version",
        "summary": "List Policies Versions Active By ID",
        "operationId": "PoliciesVersionsActiveByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/{id}/versions/active/comment": {
      "put": {
        "tags": ["Policy"],
        "description": "Sets a comment on the active policy version\r\nSet Active Version Comment",
        "summary": "Sets Policies Versions Active Comment By ID",
        "operationId": "PoliciesVersionsActiveCommentByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/{id}/versions/{versionNumber}": {
      "get": {
        "tags": ["Policy"],
        "description": "Retrieve a policy version by the version number\r\nGet Version",
        "summary": "List Policies Versions By ID And Versio nNumber",
        "operationId": "PoliciesVersionsByIdAndVersionNumberGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "versionNumber",
          "in": "path",
          "required": true,
          "type": "integer",
          "format": "int64",
          "description": "Version of the policy to return."
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policies/{id}/dependencies": {
      "get": {
        "tags": ["Policy"],
        "description": "Returns the list of dependencies for this entity.\r\nGet Dependencies\r\nGet Dependencies",
        "summary": "List Policies Dependencies By ID",
        "operationId": "PoliciesDependenciesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }, {
          "name": "level",
          "in": "query",
          "required": false,
          "default": -1,
          "type": "integer",
          "format": "int32",
          "description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\r\n1.0.1"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/policyAliases": {
      "get": {
        "tags": ["Policy Alias"],
        "description": "<p>Returns a list of policy aliases. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/policyAliases?policy.id=26df9b0abc4dd6780fd9da5929cde13e</pre></div>\n <p>Returns policy aliases for policy with ID \"26df9b0abc4dd6780fd9da5929cde13e\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Policy Aliases",
        "operationId": "PolicyAliasesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "policy.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Policy id filter"
        }, {
          "name": "folder.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Folder id filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Policy Alias"],
        "description": "Creates a new policy alias\r\nCreate",
        "summary": "Create Policy Aliases",
        "operationId": "PolicyAliasesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policyAliases/{id}": {
      "get": {
        "tags": ["Policy Alias"],
        "description": "Returns a policy alias with the given ID.\r\nGet",
        "summary": "List Policy Aliases By ID",
        "operationId": "PolicyAliasesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the policy alias to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Policy Alias"],
        "description": "Creates or Updates an existing policy alias. If a policy alias with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate Or Create",
        "summary": "Create Policy Aliases By ID",
        "operationId": "PolicyAliasesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the policy alias to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Policy Alias"],
        "description": "Deletes an existing policy alias.\r\nDelete",
        "summary": "Delte Policy Aliases By ID",
        "operationId": "PolicyAliasesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the policy alias to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policyAliases/template": {
      "get": {
        "tags": ["Policy Alias"],
        "description": "Returns a template, which is an example policy alias that can be used as a reference for what policy alias\n objects should look like.\r\nTemplate",
        "summary": "Policy Aliases Template",
        "operationId": "PolicyAliasesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/policyBackedServices": {
      "get": {
        "tags": ["Policy Backed Service"],
        "description": "<p>Returns a list of Policy Backed Services. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/policyBackedServices?name=MyPolicyBackedService</pre></div>\n <p>Returns Policy Backed Service with name \"MyPolicyBackedService\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Policy Backed Services",
        "operationId": "PolicyBackedServicesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "interface",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Interfaces filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Policy Backed Service"],
        "description": "Creates a new Policy Backed Service\r\nCreate",
        "summary": "Create Policy Backed Services",
        "operationId": "PolicyBackedServicesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policyBackedServices/{id}": {
      "get": {
        "tags": ["Policy Backed Service"],
        "description": "Returns a Policy Backed Service with the given ID.\r\nGet",
        "summary": "List Policy Backed Services By ID",
        "operationId": "PolicyBackedServicesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the Policy Backed Service to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Policy Backed Service"],
        "description": "Creates or Updates an existing Policy Backed Service. If a Policy Backed Service with the given ID does not exist\n one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create Policy Backed Services By ID",
        "operationId": "PolicyBackedServicesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the Policy Backed Service to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Policy Backed Service"],
        "description": "Deletes an existing Policy Backed Service.\r\nDelete",
        "summary": "Delete Policy Backed Services By ID",
        "operationId": "PolicyBackedServicesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the Policy Backed Service to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/policyBackedServices/template": {
      "get": {
        "tags": ["Policy Backed Service"],
        "description": "Returns a template, which is an example Policy Backed Service that can be used as a reference for what Policy Backed Service\n objects should look like.\r\nTemplate",
        "summary": "Policy Backed Services Template",
        "operationId": "PolicyBackedServicesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/policyBundleInstallers": {
      "get": {
        "tags": ["Policy Bundle Installer"],
        "description": "<p>Executes a Policy Bundle Installer action.  Choose the installer instance by setting HTTP parameter <code>installer_name</code> (e.g. set to <code>OAuthInstaller</code>).</p>\n\n <p>The following actions are supported: list components, restman get migration bundle XML, wsman dry run install, wsman install and custom.\n For restman bundle, get migration bundle.  For wsman bundle, execute dry run and install.</p>\n\n Provides actions through the following HTTP parameters:\n <h5>\n \tList components\n </h5>\n <p>\n \tList component id(s) available for this installer bundle.  This is the default if no action parameter is provided.\n </p>\n <p>\n \tInput HTTP parameter: set <code>action</code> to <code>list</code>\n </p>\n <p>\n \tOutput: List of component id(s), \";\" separated. For example:\n </p>\n <pre>1c2a2874-df8d-4e1d-b8b0-099b576407e1;ba525763-6e55-4748-9376-76055247c8b1;f69c7d15-4999-4761-ab26-d29d58c0dd57;b082274b-f00e-4fbf-bbb7-395a95ca2a35;a07924c0-0265-42ea-90f1-2428e31ae5ae;\n </pre>\n <h5>\n \tRestman get migration bundle\n </h5>\n <p>\n \tGet the restman migration bundle XML for the given component(s).\n </p>\n <p>\n \tInput HTTP parameters:\n </p>\n <ul>\n \t<li>\n \t\tSet <code>action</code> to <code>restman_get</code>\n \t</li>\n \t<li>\n \t\tSet <code>component_ids</code> to a \";\" separated list of component ids. Or set to <code>all</code> to specify all available installer components.\n \t\tThis is equivalent to all component id(s) from the <code>list</code> action.\n \t</li>\n \t<li>\n \t\tOptionally set <code>version_modifier</code> - optional version modifier\n \t</li>\n \t<li>\n \t\tOptionally set <code>folder_goid</code> - optional install folder (if not set, defaults to root folder)\n \t</li>\n </ul>\n <p>\n \tOutput: The restman migration bundle XML for each component. For example:\n </p>\n <pre>&lt;l7:Bundle xmlns:l7=\"<a rel=\"nofollow\" href=\"http://ns.l7tech.com/2010/04/gateway-management\">http://ns.l7tech.com/2010/04/gateway-management</a>\"&gt;\n     &lt;l7:References&gt;\n         &lt;l7:Item&gt;\n          ...\n         &lt;/l7:Mapping&gt;\n     &lt;/l7:Mappings&gt;\n &lt;/l7:Bundle&gt;\n </pre>\n <h5>\n \tWsman dry run install\n </h5>\n <p>\n \tExecute wsman dry run install for given component(s).\n </p>\n <p>\n \tInput HTTP parameters:\n </p>\n <ul>\n \t<li>\n \t\tSet <code>action</code> to <code>wsman_dry_run</code>\n \t</li>\n \t<li>\n \t\tSet <code>component_ids</code> to a \";\" separated list of component ids. Or set to <code>all</code> to specify all available installer components.\n \t\tThis is equivalent to all component id(s) from the <code>list</code> action.\n \t</li>\n \t<li>\n \t\tOptionally set <code>version_modifier</code> - optional version modifier\n \t</li>\n \t<li>\n \t\tOptionally map JDBC connection name to new name\n \t\t<ul>\n \t\t\t<li>\n \t\t\t\tSet <code>jdbc_connection.&lt;component_id&gt;.name</code> with existing name in bundle (e.g. OAuth)\n \t\t\t</li>\n \t\t\t<li>\n \t\t\t\tSet <code>jdbc_connection.&lt;component_id&gt;.new_name</code> with a new desired name (e.g. OAuth Dev)\n \t\t\t</li>\n \t\t</ul>\n \t</li>\n </ul>\n <p>\n \tOutput: The conflicts for each component. For example:\n </p>\n <pre>ComponentId: 1c2a2874-df8d-4e1d-b8b0-099b576407e1\n ServiceConflict: /auth/oauth/v1/token;/auth/oauth/v1/authorize/website;/oauth/v1/client;/protected/resource;/auth/oauth/v1/authorize;/auth/oauth/v1/request;/auth/oauth/v1/*\n PolicyConflict: OAuth 1.0 Context Variables;Require OAuth 1.0 Token;getClientSignature;Authenticate OAuth 1.0 Parameter;Token Lifetime Context Variables;GenerateOAuthToken;OAuth Client Token Store Context Variables\n CertificateConflict:\n JdbcConnectionsThatDontExist:\n MissingAssertions:\n EncapsulatedAssertionConflict:\n ...\n </pre>\n <p>\n \tIt's recommended to <strong>not continue</strong> with installation if any conflicts are detected. Continuing the installation with detected conflicts may\n \tresult in partial installation of components. Components with detected conflicts will <strong>not</strong> be installed. As a result, references to\n \tconflicted components may incorrectly reference the previous version of the component already on the Gateway (if one exists).\n </p>\n <h5>\n \tWsman install\n </h5>\n <p>\n \tExecute wsman install for given component(s).\n </p>\n <p>\n \tInput HTTP parameters:\n </p>\n <ul>\n \t<li>\n \t\tSet <code>action</code> to <code>wsman_install</code>\n \t</li>\n \t<li>\n \t\tSet <code>component_ids</code> to a \";\" separated list of component ids. Or set to <code>all</code> to specify all available installer components.\n \t\tThis is equivalent to all component id(s) from the <code>list</code> action.\n \t</li>\n \t<li>\n \t\tOptionally set <code>version_modifier</code> - optional version modifier\n \t</li>\n \t<li>\n \t\tOptionally set <code>folder_goid</code> - optional install folder (if not set, defaults to root folder)\n \t</li>\n \t<li>\n \t\tOptionally map JDBC connection name to new name\n \t\t<ul>\n \t\t\t<li>\n \t\t\t\tSet <code>jdbc_connection.&lt;component_id&gt;.name</code> with existing name in bundle (e.g. OAuth)\n \t\t\t</li>\n \t\t\t<li>\n \t\t\t\tSet <code>jdbc_connection.&lt;component_id&gt;.new_name</code> with a new desired name (e.g. OAuth Dev)\n \t\t\t</li>\n \t\t</ul>\n \t</li>\n </ul>\n <p>\n \tOutput: List of installed component id(s), \";\" separated. For example:\n </p>\n <pre>1c2a2874-df8d-4e1d-b8b0-099b576407e1;ba525763-6e55-4748-9376-76055247c8b1;f69c7d15-4999-4761-ab26-d29d58c0dd57;b082274b-f00e-4fbf-bbb7-395a95ca2a35;a07924c0-0265-42ea-90f1-2428e31ae5ae\n </pre>\n <h5>\n \tCustom\n </h5>\n <p>\n \tAn installer can implement custom action, custom wsman dry run and install logic. For example the OAuth installer implements its own custom action to get a\n \tdatabase schema. It also executes custom logic to integrate API Portal for wsman dry run and install.\n </p>\n <p>\n \tInput: Set HTTP parameter <code>action</code> to <code>custom</code> in order to choose a custom action. <strong>And</strong> set HTTP parameter(s)\n \trequired for the custom installer.\n </p>\r\nExecute",
        "summary": "Policy Bundle Installers",
        "operationId": "PolicyBundleInstallersGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "installer_name",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "name of installer instance to use (e.g. OAuthInstaller)"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/privateKeys": {
      "get": {
        "tags": ["Private Key"],
        "description": "<p>Returns a list of private keys. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/privateKeys?alias=mykey</pre></div>\n <p>Returns the private key with alias \"mykey\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Private Keys",
        "operationId": "PrivateKeysGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                ascending if not specified"
        }, {
          "name": "alias",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Alias filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/{id}": {
      "get": {
        "tags": ["Private Key"],
        "description": "Retrieve a private key by its ID. The ID is a combination of the keystoreId and the key alias separated by a\n ':'.\n For example 00000000000000000000000000000002:mykey\r\nGet",
        "summary": "List Private Keys By ID",
        "operationId": "PrivateKeysByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the private key to retrieve"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Private Key"],
        "description": "Updates an existing private key. This api call can be used to replace a private key's certificate chain or\n change\n its\n security zone.\r\nUpdate",
        "summary": "Update Private Keys By ID",
        "operationId": "PrivateKeysByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the private key to update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Private Key"],
        "description": "<p>Creates a new private key given a PrivateKeyCreationContext. The PrivateKeyCreationContext is used to specify\n how\n the private key should be created. The PrivateKeyCreationContext dn is the domain name to create the key with.\n The properties are optional but you may specify:</p>\n <table class=\"properties-table\" cellpadding=\"0\" cellspacing=\"0\">\n <tr><th>Key</th><th>Type</th><th>Description</th></tr>\n <tr>\n <td>ecName</td>\n <td>String</td>\n <td>This the Elliptic Curve key type to use. If it is not specified an RSA key type is used.</td>\n </tr>\n <tr>\n <td>rsaKeySize</td>\n <td>Integer</td>\n <td>This is the rsa key size to use. This is only applicable if an ecName is not specified. Defaults to\n 2048</td>\n </tr>\n <tr>\n <td>daysUntilExpiry</td>\n <td>Integer</td>\n <td>Specify the number of days until the key expires. Defaults to 5 years.</td>\n </tr>\n <tr>\n <td>caCapable</td>\n <td>Boolean</td>\n <td>Specify if the certificate should be CA capable. Defaults to false</td>\n </tr>\n <tr>\n <td>signatureHashAlgorithm</td>\n <td>String</td>\n <td>The algorithm used for the signature hash.</td>\n </tr>\n </table>\n <p class=\"italicize\">Example request:</p>\n <div class=\"code\">\n <pre>\n &lt;l7:PrivateKeyCreationContext xmlns:l7=&quot;http://ns.l7tech.com/2010/04/gateway-management&quot;&gt;\n     &lt;l7:Dn&gt;CN=srcAlias&lt;/l7:Dn&gt;\n     &lt;l7:Properties&gt;\n         &lt;l7:Property key=&quot;signatureHashAlgorithm&quot;&gt;\n             &lt;l7:StringValue&gt;SHA384&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;rsaKeySize&quot;&gt;\n             &lt;l7:IntegerValue&gt;516&lt;/l7:IntegerValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;ecName&quot;&gt;\n             &lt;l7:StringValue&gt;secp384r1&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;daysUntilExpiry&quot;&gt;\n             &lt;l7:IntegerValue&gt;2&lt;/l7:IntegerValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;caCapable&quot;&gt;\n             &lt;l7:BooleanValue&gt;true&lt;/l7:BooleanValue&gt;\n         &lt;/l7:Property&gt;\n     &lt;/l7:Properties&gt;\n &lt;/l7:PrivateKeyCreationContext&gt;\n </pre>\n </div>\n <p>This responds with a reference to the newly created private key.</p>\r\nCreate Resource",
        "summary": "Create Private Keys By ID",
        "operationId": "PrivateKeysByIdPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the private key to create in the form of [keystore ID]:[alias]"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Private Key"],
        "description": "Deletes an existing private key.\r\nDelete",
        "summary": "Delete Private Keys By ID",
        "operationId": "PrivateKeysByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the private key to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/template/privatekeyexportcontext": {
      "get": {
        "tags": ["Private Key"],
        "description": "Returns a template, which is an example private key export context that can be used as a reference for what\n private key export context objects\n should look like.\r\nTemplate Private Key Export Context",
        "summary": "Private Keys Template Private Key Export Context",
        "operationId": "PrivateKeysTemplatePrivatekeyexportcontextGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/{id}/signCert": {
      "put": {
        "tags": ["Private Key"],
        "description": "Signs a csr pem file with the specified key.\r\nSign Cert",
        "summary": "Private Keys Sign Cert By ID",
        "operationId": "PrivateKeysSignCertByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the key to sign the certificate with"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "subjectDN",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "The subject DN to set on the signed certificate"
        }, {
          "name": "expiryAge",
          "in": "query",
          "required": false,
          "default": 730,
          "type": "integer",
          "format": "int32",
          "description": "The expiry age of the certificate"
        }, {
          "name": "signatureHash",
          "in": "query",
          "required": false,
          "enum": ["Automatic", "SHA1", "SHA256", "SHA384", "SHA512"],
          "default": "Automatic",
          "type": "string",
          "description": "The signature hash to use. Defaults to 'Automatic'"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/{id}/export": {
      "put": {
        "tags": ["Private Key"],
        "description": "Export a private key.\r\nExport Private Key",
        "summary": "Private Keys Export By ID",
        "operationId": "PrivateKeysExportByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the key to export"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/template/privatekeyimportcontext": {
      "get": {
        "tags": ["Private Key"],
        "description": "Returns a template, which is an example private key import context that can be used as a reference for what\n private key import context objects\n should look like.\r\nTemplate Private Key Import Context",
        "summary": "Private Keys Template Private Key Import Context",
        "operationId": "PrivateKeysTemplatePrivatekeyimportcontextGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/template/privatekeycreationcontext": {
      "get": {
        "tags": ["Private Key"],
        "description": "Returns a template, which is an example private key creation context that can be used as a reference for what\n private key creation context objects\n should look like.\r\nTemplate Private Key Creation Context",
        "summary": "Private Keys Template Private Key Creation Context",
        "operationId": "PrivateKeysTemplatePrivatekeycreationcontextGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/template": {
      "get": {
        "tags": ["Private Key"],
        "description": "Returns a template, which is an example private key that can be used as a reference for what private key objects\n should look like.\r\nTemplate",
        "summary": "Private Keys Template",
        "operationId": "PrivateKeysTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/{id}/generateCSR": {
      "get": {
        "tags": ["Private Key"],
        "description": "Generate a certificate signing request for this private key.\r\nGenerate Csr",
        "summary": "Private Keys Generate CSR By ID",
        "operationId": "PrivateKeysGenerateCSRByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the key to generate the CSR from"
        }, {
          "name": "csrSubjectDN",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "The CSR subject dn to use. It defaults to the key's subject dn if none is specified."
        }, {
          "name": "signatureHash",
          "in": "query",
          "required": false,
          "enum": ["SHA1", "SHA256", "SHA384", "SHA512"],
          "type": "string",
          "description": "The signature hash to use. Defaults to 'Automatic'"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/{id}/specialPurpose": {
      "put": {
        "tags": ["Private Key"],
        "description": "Mark a private key for a special special purpose\r\nMark Special Purpose",
        "summary": "Private Keys Special Purpose By ID",
        "operationId": "PrivateKeysSpecialPurposeByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the key to mark for special purpose"
        }, {
          "name": "purpose",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["SSL", "CA", "AUDIT_VIEWER", "AUDIT_SIGNING"]
          },
          "description": "The special purpose to mark the key with. Can specify more then one special purposes."
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/privateKeys/{id}/import": {
      "post": {
        "tags": ["Private Key"],
        "description": "Import a private key.\r\nImport Private Key",
        "summary": "Private Keys Import By ID",
        "operationId": "PrivateKeysImportByIdPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID to import the key into"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/services": {
      "get": {
        "tags": ["Published Services"],
        "description": "<p>Returns a list of servicees. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/services?name=MyService</pre></div>\n <p>Returns service with name \"MyService\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Services",
        "operationId": "ServicesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "guid",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Guid filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "soap",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Soap filter"
        }, {
          "name": "parentFolder.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parent folder ID filter."
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Published Services"],
        "description": "Creates a new service\r\nCreate",
        "summary": "Create Services",
        "operationId": "ServicesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "versionComment",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "The comment to add to the policy version when creating the service"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/{id}/versions": {
      "get": {
        "tags": ["Published Services"],
        "description": "<p>Returns a list of policy versions. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList Versions",
        "summary": "List Services Versions By ID",
        "operationId": "ServicesVersionsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Id filter"
        }, {
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "version"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                 ascending if not specified"
        }, {
          "name": "active",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Active filter"
        }, {
          "name": "comment",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Comment filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/{id}/versions/{versionNumber}/comment": {
      "put": {
        "tags": ["Published Services"],
        "description": "Sets the comment on a specific policy version.\r\nSet Version Comment",
        "summary": "Sets Services Versions Comment By ID",
        "operationId": "ServicesVersionsCommentByIdAndVersionNumberPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "versionNumber",
          "in": "path",
          "required": true,
          "type": "integer",
          "format": "int64",
          "description": "Version of the policy version to set the comment on."
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/{id}/versions/active": {
      "get": {
        "tags": ["Published Services"],
        "description": "Returns the active policy version.\r\nGet Active Version",
        "summary": "List Services Versions Active By ID",
        "operationId": "ServicesVersionsActiveByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/{id}/versions/active/comment": {
      "put": {
        "tags": ["Published Services"],
        "description": "Sets a comment on the active policy version\r\nSet Active Version Comment",
        "summary": "Sets Services Versions Active Comment By ID",
        "operationId": "ServicesVersionsActiveCommentByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/{id}/versions/{versionNumber}/activate": {
      "post": {
        "tags": ["Published Services"],
        "description": "Activates the specified policy version\r\nActivate Version",
        "summary": "Sets Services Versions Activate By ID",
        "operationId": "ServicesVersionsActivateByIdAndVersionNumberPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "versionNumber",
          "in": "path",
          "required": true,
          "type": "integer",
          "format": "int64",
          "description": "Version of the policy version to set active."
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/{id}/versions/{versionNumber}": {
      "get": {
        "tags": ["Published Services"],
        "description": "Retrieve a policy version by the version number\r\nGet Version",
        "summary": "List Services Versions By ID And Version Number",
        "operationId": "ServicesVersionsByIdAndVersionNumberGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "versionNumber",
          "in": "path",
          "required": true,
          "type": "integer",
          "format": "int64",
          "description": "Version of the policy to return."
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/{id}/dependencies": {
      "get": {
        "tags": ["Published Services"],
        "description": "Returns the list of dependencies for this entity.\r\nGet Dependencies\r\nGet Dependencies",
        "summary": "List Services Dependencies By ID",
        "operationId": "ServicesDependenciesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }, {
          "name": "level",
          "in": "query",
          "required": false,
          "default": -1,
          "type": "integer",
          "format": "int32",
          "description": "How deep to search for the dependencies. 0 for none, 1 for immediate dependencies, -1 for full depth search\r\n1.0.1"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/{id}": {
      "get": {
        "tags": ["Published Services"],
        "description": "Returns a service with the given ID.\r\nGet",
        "summary": "List Services By ID",
        "operationId": "ServicesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the service to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Published Services"],
        "description": "Creates or Updates an existing service. If a service with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate Or Create",
        "summary": "Create or Update Services By ID",
        "operationId": "ServicesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the service to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "active",
          "in": "query",
          "required": false,
          "default": true,
          "type": "boolean",
          "description": "Should the service be activated after the update."
        }, {
          "name": "versionComment",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "The comment to add to the policy version when updating the service"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Published Services"],
        "description": "Deletes an existing service.\r\nDelete",
        "summary": "Delete Services By ID",
        "operationId": "ServicesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the service to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/services/template": {
      "get": {
        "tags": ["Published Services"],
        "description": "Returns a template, which is an example service that can be used as a reference for what service objects should\n look like.\r\nTemplate",
        "summary": "Services Template",
        "operationId": "ServicesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/resources": {
      "get": {
        "tags": ["Resource Document"],
        "description": "<p>Returns a list of resource documents. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/resources?uri=documentURI</pre></div>\n <p>Returns resource document with uri \"documentURI\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/resources?type=xmlschema</pre></div>\n <p>Returns resource documents of xmlschema type</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Resources",
        "operationId": "ResourcesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "uri"],
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "uri",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Uri filter"
        }, {
          "name": "description",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Description filter"
        }, {
          "name": "type",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["dtd", "xmlschema"]
          },
          "description": "Type filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Resource Document"],
        "description": "Creates a new resource document\r\nCreate",
        "summary": "Create Resources",
        "operationId": "ResourcesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/resources/{id}": {
      "get": {
        "tags": ["Resource Document"],
        "description": "Returns a resource document with the given ID.\r\nGet",
        "summary": "List Resources By ID",
        "operationId": "ResourcesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the resource document to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Resource Document"],
        "description": "Creates or Updates an existing resource document. If a resource document with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate",
        "summary": "Create or Update Resources By ID",
        "operationId": "ResourcesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the resource document to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Resource Document"],
        "description": "Deletes an existing resource document.\r\nDelete",
        "summary": "Delete Resources By ID",
        "operationId": "ResourcesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the resource document to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/resources/template": {
      "get": {
        "tags": ["Resource Document"],
        "description": "Returns a template, which is an example resource document that can be used as a reference for what resource\n document objects should look like.\r\nTemplate",
        "summary": "Resources Template",
        "operationId": "ResourcesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/revocationCheckingPolicies": {
      "get": {
        "tags": ["Revocation Checking Policy"],
        "description": "<p>Returns a list of revocation checking policies. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/revocationCheckingPolicies?name=MyRevocationCheckPolicy</pre></div>\n <p>Returns revocation checking policy with name \"MyRevocationCheckPolicy\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Revocation Checking Policies",
        "operationId": "RevocationCheckingPoliciesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Revocation Checking Policy"],
        "description": "Creates a new revocation checking policy\r\nCreate",
        "summary": "Create Revocation Checking Policies",
        "operationId": "RevocationCheckingPoliciesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/revocationCheckingPolicies/template": {
      "get": {
        "tags": ["Revocation Checking Policy"],
        "description": "Returns a template, which is an example revocation checking policy that can be used as a reference for what\n revocation checking policy objects should look like.\r\nTemplate",
        "summary": "Revocation Checking Policies Template",
        "operationId": "RevocationCheckingPoliciesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/revocationCheckingPolicies/{id}": {
      "get": {
        "tags": ["Revocation Checking Policy"],
        "description": "Returns a revocation checking policy with the given ID.\r\nGet",
        "summary": "List Revocation Checking Policies By ID",
        "operationId": "RevocationCheckingPoliciesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the revocation checking policy to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Revocation Checking Policy"],
        "description": "Creates or Updates an existing revocation checking policy. If an revocation checking policy with the given ID\n does not exist one will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Revocation Checking Policies By ID",
        "operationId": "RevocationCheckingPoliciesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the revocation checking policy to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Revocation Checking Policy"],
        "description": "Deletes an existing revocation checking policy.\r\nDelete",
        "summary": "Delete Revocation Checking Policies By ID",
        "operationId": "RevocationCheckingPoliciesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the revocation checking policy to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/roles": {
      "get": {
        "tags": ["Roles"],
        "description": "<p>Returns a list of roles. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/roles?name=MyRole</pre></div>\n <p>Returns role with name \"MyRole\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Roles",
        "operationId": "RolesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                    ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "userCreated",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "User created filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Roles"],
        "description": "Creates a new role\r\nCreate",
        "summary": "Create a New Roles",
        "operationId": "RolesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/roles/{id}/assignments": {
      "put": {
        "tags": ["Roles"],
        "description": "Adds role assignments to the role.\r\nAdd Assignment",
        "summary": "Adds a Roles Assignments By ID",
        "operationId": "RolesAssignmentsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Roles"],
        "description": "Removes role assignments\r\nDelete Assignment",
        "summary": "Delete Roles Assignments By ID",
        "operationId": "RolesAssignmentsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The assignments to remove"
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/roles/{id}/assignments/template/addassignments": {
      "get": {
        "tags": ["Roles"],
        "description": "Returns a template, which is an example add assignments context that can be used as a reference for what add\n assignments context objects should look like.\r\nAdd Assignments Context Template",
        "summary": "Roles Assignments Template Add assignments",
        "operationId": "RolesAssignmentsTemplateAddassignmentsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": ""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/roles/{id}": {
      "get": {
        "tags": ["Roles"],
        "description": "Returns a role with the given ID.\r\nGet",
        "summary": "List Roles By ID",
        "operationId": "RolesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the role to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Roles"],
        "description": "Creates or Updates an existing role. If a role with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Roles By ID",
        "operationId": "RolesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the role to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Roles"],
        "description": "Deletes an existing role.\r\nDelete",
        "summary": "Delete Roles By ID",
        "operationId": "RolesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the role to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/roles/template": {
      "get": {
        "tags": ["Roles"],
        "description": "Returns a template, which is an example role that can be used as a reference for what role objects should look\n like.\r\nTemplate",
        "summary": "Roles Template",
        "operationId": "RolesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/sampleMessages": {
      "get": {
        "tags": ["Sample Message"],
        "description": "<p>Returns a list of sample messages. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/sampleMessages?name=MySampleMessage</pre></div>\n <p>Returns sample message with name \"MySampleMessage\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Sample Messages",
        "operationId": "SampleMessagesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "operationName",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Operation filter"
        }, {
          "name": "service.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Service ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Sample Message"],
        "description": "Creates a new sample message\r\nCreate",
        "summary": "Create Sample Messages",
        "operationId": "SampleMessagesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/sampleMessages/template": {
      "get": {
        "tags": ["Sample Message"],
        "description": "Returns a template, which is an example sample message that can be used as a reference for what sample message objects\n should look like.\r\nTemplate",
        "summary": "Sample Messages Template",
        "operationId": "SampleMessagesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/sampleMessages/{id}": {
      "get": {
        "tags": ["Sample Message"],
        "description": "Returns a sample message with the given ID.\r\nGet",
        "summary": "List Sample Messages By ID",
        "operationId": "SampleMessagesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the sample message to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Sample Message"],
        "description": "Creates or Updates an existing sample message. If a sample message with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate",
        "summary": "Create or Update Sample Messages By ID",
        "operationId": "SampleMessagesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the sample message to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Sample Message"],
        "description": "Deletes an existing sample message.\r\nDelete",
        "summary": "Delete Sample Messages By ID",
        "operationId": "SampleMessagesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the sample message to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/scheduledTasks": {
      "get": {
        "tags": ["Scheduled Task"],
        "description": "<p>Returns a list of scheduled tasks. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/scheduledTasks?name=MyScheduledTask</pre></div>\n <p>Returns scheduled task with name \"MyScheduledTask\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Scheduled Tasks",
        "operationId": "ScheduledTasksGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "node",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Node filter; \"all\" or \"one\""
        }, {
          "name": "type",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Job Type filter"
        }, {
          "name": "status",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Job Status filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Scheduled Task"],
        "description": "Creates a new scheduled task\r\nCreate",
        "summary": "Create Scheduled Tasks",
        "operationId": "ScheduledTasksPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/scheduledTasks/{id}": {
      "get": {
        "tags": ["Scheduled Task"],
        "description": "Returns a scheduled task with the given ID.\r\nGet",
        "summary": "List Scheduled Tasks By ID",
        "operationId": "ScheduledTasksByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the scheduled task to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Scheduled Task"],
        "description": "Creates or Updates an existing Scheduled task. If a scheduled task with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create Scheduled Tasks By ID",
        "operationId": "ScheduledTasksByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the scheduled task to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Scheduled Task"],
        "description": "Deletes an existing scheduled task.\r\nDelete",
        "summary": "Delete Scheduled Tasks By ID",
        "operationId": "ScheduledTasksByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the scheduled task to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/scheduledTasks/template": {
      "get": {
        "tags": ["Scheduled Task"],
        "description": "Returns a template, which is an example scheduled task that can be used as a reference for what scheduled task\n objects should look like.\r\nTemplate",
        "summary": "Scheduled Tasks Template",
        "operationId": "ScheduledTasksTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/passwords": {
      "get": {
        "tags": ["Secure Passwords"],
        "description": "<p>Returns a list of secure passwords. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/passwords?name=MyPassword</pre></div>\n <p>Returns secure password with name \"MyPassword\".</p>\n <div class=\"code indent\"><pre>/restman/1.0/passwords?type=Password&name=MyPassword&name=MyOtherPassword</pre></div>\n <p>Returns secure password of Password type with name either \"MyPassword\" or\n \"MyOtherPassword\"</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Secure Passwords",
        "operationId": "PasswordsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "type",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Type filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Secure Passwords"],
        "description": "Creates a new secure password\r\nCreate",
        "summary": "Create Secure Passwords",
        "operationId": "PasswordsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/passwords/template": {
      "get": {
        "tags": ["Secure Passwords"],
        "description": "Returns a template, which is an example secure password that can be used as a reference for what secure password\n objects should look like.\r\nTemplate",
        "summary": "Secure Passwords Template",
        "operationId": "PasswordsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/passwords/{id}": {
      "get": {
        "tags": ["Secure Passwords"],
        "description": "Returns a secure password with the given ID.\r\nGet",
        "summary": "List Secure Passwords By ID",
        "operationId": "PasswordsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the secure password to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Secure Passwords"],
        "description": "Creates or Updates an existing secure password. If a secure password with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Secure Passwords By ID",
        "operationId": "PasswordsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the secure password to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Secure Passwords"],
        "description": "Deletes an existing secure password.\r\nDelete",
        "summary": "Delete Secure Passwords By ID",
        "operationId": "PasswordsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the secure password to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/securityZones": {
      "get": {
        "tags": ["Security Zones"],
        "description": "<p>Returns a list of security zones. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/securityZones?name=MySecurityZone</pre></div>\n <p>Returns security zone with name \"MySecurityZone\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Security Zones",
        "operationId": "SecurityZonesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n              ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Security Zones"],
        "description": "Creates a new security zone\r\nCreate",
        "summary": "Create Security Zones",
        "operationId": "SecurityZonesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/securityZones/{id}": {
      "get": {
        "tags": ["Security Zones"],
        "description": "Returns a security zone with the given ID.\r\nGet",
        "summary": "List Security Zones By ID",
        "operationId": "SecurityZonesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the security zone to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Security Zones"],
        "description": "Creates or Updates an existing security zone. If an security zone with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Security Zones By ID",
        "operationId": "SecurityZonesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the security zone to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Security Zones"],
        "description": "Deletes an existing security zone.\r\nDelete",
        "summary": "Delete Security Zones By ID",
        "operationId": "SecurityZonesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the security zone to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/securityZones/template": {
      "get": {
        "tags": ["Security Zones"],
        "description": "Returns a template, which is an example security zone that can be used as a reference for what security zone\n objects should look like.\r\nTemplate",
        "summary": "Security Zones Template",
        "operationId": "SecurityZonesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/serviceAliases": {
      "get": {
        "tags": ["Service Alias"],
        "description": "<p>Returns a list of service aliases. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/serviceAliases?service.id=26df9b0abc4dd6780fd9da5929cde13e</pre></div>\n <p>Returns service aliases for service with ID \"26df9b0abc4dd6780fd9da5929cde13e\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Service Aliases",
        "operationId": "ServiceAliasesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "service.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Service id filter"
        }, {
          "name": "folder.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Folder id filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Service Alias"],
        "description": "Creates a new service alias\r\nCreate",
        "summary": "Create Service Aliases",
        "operationId": "ServiceAliasesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/serviceAliases/{id}": {
      "get": {
        "tags": ["Service Alias"],
        "description": "Returns a service alias with the given ID.\r\nGet",
        "summary": "List Service Aliases By ID",
        "operationId": "ServiceAliasesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the service alias to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Service Alias"],
        "description": "Creates or Updates an existing service alias. If a service alias with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate Or Create",
        "summary": "Create Service Aliases By ID",
        "operationId": "ServiceAliasesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the service alias to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Service Alias"],
        "description": "Deletes an existing service alias.\r\nDelete",
        "summary": "Delete Service Aliases By ID",
        "operationId": "ServiceAliasesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the service alias to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/serviceAliases/template": {
      "get": {
        "tags": ["Service Alias"],
        "description": "Returns a template, which is an example service alias that can be used as a reference for what service alias\n objects should look like.\r\nTemplate",
        "summary": "Service Aliases Template",
        "operationId": "ServiceAliasesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/serverModuleFiles": {
      "get": {
        "tags": ["Server Module File"],
        "description": "<p>Returns a list of ServerModuleFiles. Can optionally sort the resulting list in ascending or\n descending order and optionally include the module data. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/serverModuleFiles?name=MyServerModuleFile</pre></div>\n <p>Returns ServerModuleFile with name \"MyServerModuleFile\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Server Module Files",
        "operationId": "ServerModuleFilesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name", "type"],
          "type": "string",
          "description": "The sort key to sort the list by; 'id'=GOID, 'name'=name, 'type'=module_type."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to ascending if not specified."
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter."
        }, {
          "name": "type",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["Custom", "Modular"]
          },
          "description": "Module Type filter."
        }, {
          "name": "includeData",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "Optionally include the module data bytes, defaults to false if not specified."
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Server Module File"],
        "description": "<p>Creates a new ServerModuleFile. The properties are optional but you may specify:</p>\n <table class=\"properties-table\" cellpadding=\"0\" cellspacing=\"0\">\n <tr><th>Key</th><th>Type</th><th>Description</th></tr>\n <tr>\n <td>moduleFileName</td>\n <td>String</td>\n <td>The module original File Name.\n Optional and if not specified empty text will be shown under Manage Server Module Files dialog in the Policy Manager.</td>\n </tr>\n <tr>\n <td>moduleSize</td>\n <td>String</td>\n <td>This is the module data-bytes size in bytes.\n Should not be assumed to be 100% reliable, and is intended to be used for display purposes.\n Optional and if not specified the size will be calculated from the specified module data-bytes.</td>\n </tr>\n <tr>\n <td>moduleAssertions</td>\n <td>String</td>\n <td>Comma separated list of Module Assertion ClassNames.\n Optional and if not specified empty text will be shown under Server Module Files Properties dialog in the Policy Manager.</td>\n </tr>\n </table>\n <p class=\"italicize\">Example request:</p>\n <div class=\"code\">\n <pre>\n &lt;l7:ServerModuleFile xmlns:l7=&quot;http://ns.l7tech.com/2010/04/gateway-management&quot;&gt;\n     &lt;l7:Name&gt;module name&lt;/l7:Name&gt;\n     .......\n     &lt;l7:Properties&gt;\n         &lt;l7:Property key=&quot;moduleAssertions&quot;&gt;\n              &lt;l7:StringValue&gt;TestAssertion1,TestAssertion2&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;moduleFileName&quot;&gt;\n              &lt;l7:StringValue&gt;testAssertion.jar&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n         &lt;l7:Property key=&quot;moduleSize&quot;&gt;\n              &lt;l7:StringValue&gt;38191&lt;/l7:StringValue&gt;\n         &lt;/l7:Property&gt;\n     &lt;/l7:Properties&gt;\n &lt;/l7:ServerModuleFile&gt;\n </pre>\n </div>\n <p>When ServerModuleFile functionality is disabled this method will fail with FORBIDDEN (403).</p>\n <p>This responds with a reference to the newly created ServerModuleFile.</p>\r\nUpload",
        "summary": "Create Server Module Files",
        "operationId": "ServerModuleFilesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/serverModuleFiles/{id}": {
      "get": {
        "tags": ["Server Module File"],
        "description": "Returns a ServerModuleFile with the given id.\r\nGet",
        "summary": "List Server Module Files By ID",
        "operationId": "ServerModuleFilesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The id of the ServerModuleFile to retrieve."
        }, {
          "name": "includeData",
          "in": "query",
          "required": false,
          "default": false,
          "type": "boolean",
          "description": "Optionally include the module data bytes, defaults to false if not specified."
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Server Module File"],
        "description": "Creates a new ServerModuleFile with specified ID. <br/>\n If a ServerModuleFile with the given ID does not exist one will be created and its data uploaded,\n otherwise method will fail with FORBIDDEN (403).<br/>\n Note that module data update is not currently supported and this method will fail with FORBIDDEN (403).\n To update the module data delete and re-upload the module with newer version again.\n <p>When ServerModuleFile functionality is disabled this method will fail with FORBIDDEN (403).</p>\r\nCreate Or Update",
        "summary": "Create Server Module Files With ID",
        "operationId": "ServerModuleFilesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the ServerModuleFile to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Server Module File"],
        "description": "Deletes an existing ServerModuleFile.\n <p>When ServerModuleFile functionality is disabled this method will fail with FORBIDDEN (403).</p>\r\nDelete",
        "summary": "Delete Server Module Files By ID",
        "operationId": "ServerModuleFilesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The id of the ServerModuleFile to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/serverModuleFiles/template": {
      "get": {
        "tags": ["Server Module File"],
        "description": "Returns a template, which is an example ServerModuleFile that can be used as a reference\n for what ServerModuleFile objects should look like.\r\nTemplate",
        "summary": "Server Module Files Template",
        "operationId": "ServerModuleFilesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/siteMinderConfigurations": {
      "get": {
        "tags": ["SiteMinder Configuration"],
        "description": "<p>Returns a list of SiteMinder configurations. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/siteMinderConfigurations?name=MySiteMinderConfiguration</pre></div>\n <p>Returns SiteMinder configuration with name \"MySiteMinderConfiguration\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All SiteMinder Configurations",
        "operationId": "SiteMinderConfigurationsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "enabled",
          "in": "query",
          "required": false,
          "type": "boolean",
          "description": "Enabled filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["SiteMinder Configuration"],
        "description": "Creates a new SiteMinder configuration\r\nCreate",
        "summary": "Create SiteMinder Configurations",
        "operationId": "SiteMinderConfigurationsPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/siteMinderConfigurations/{id}": {
      "get": {
        "tags": ["SiteMinder Configuration"],
        "description": "Returns a SiteMinder configuration with the given ID.\r\nGet",
        "summary": "List SiteMinder Configurations By ID",
        "operationId": "SiteMinderConfigurationsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the SiteMinder configuration to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["SiteMinder Configuration"],
        "description": "Creates or Updates an existing SiteMinder configuration. If a SiteMinder configuration with the given ID does not\n exist one\n will be created, otherwise the existing one will be updated.\r\nUpdate",
        "summary": "Create or Update SiteMinder Configurations By ID",
        "operationId": "SiteMinderConfigurationsByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the SiteMinder configuration to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["SiteMinder Configuration"],
        "description": "Deletes an existing SiteMinder configuration.\r\nDelete",
        "summary": "Delete SiteMinder Configurations By ID",
        "operationId": "SiteMinderConfigurationsByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the SiteMinder configuration to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/siteMinderConfigurations/template": {
      "get": {
        "tags": ["SiteMinder Configuration"],
        "description": "Returns a template, which is an example SiteMinder configuration that can be used as a reference for what\n SiteMinder configuration objects should look like.\r\nTemplate",
        "summary": "SiteMinder Configurations Template",
        "operationId": "SiteMinderConfigurationsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/solutionKits": {
      "get": {
        "tags": ["Solution Kits"],
        "description": "<p>Returns a list of SolutionKits. Can optionally sort the resulting list in ascending or descending order.\n Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/solutionKits?name=MySolutionKit</pre></div>\n <p>Returns SolutionKit with name \"MySolutionKit\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List Solution Kits",
        "operationId": "SolutionKitsGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name", "guid", "parent"],
          "type": "string",
          "description": "The sort key to sort the list by; 'id'=GOID, 'name'=name, 'guid'=sk_guid, 'parent'=parent_goid."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to ascending if not specified."
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter."
        }, {
          "name": "guid",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Guid filter."
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/solutionKits/template": {
      "get": {
        "tags": ["Solution Kits"],
        "description": "Returns a template, which is an example SolutionKit that can be used as a reference for what SolutionKit objects should look like.\r\nTemplate",
        "summary": "Solution Kits Template",
        "operationId": "SolutionKitsTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/solutionKits/{id}": {
      "get": {
        "tags": ["Solution Kits"],
        "description": "Returns a SolutionKit with the given id.\r\nGet",
        "summary": "List Solution Kits By ID",
        "operationId": "SolutionKitsByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The id of the SolutionKit to retrieve."
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/solutionKitManagers": {
      "post": {
        "tags": ["Solution Kit Manager"],
        "description": "Install or upgrade a SKAR file.\n\n <h5>To Install</h5>\n <ul>\n \t<li>Upload a SKAR file using a <code>POST</code> request.</li>\n \t<li>Set the encoding to <code>multipart/form-data</code>.</li>\n \t<li>Set the file upload form-field name as <code>file</code>.  The uploaded file has to be signed (*.sskar format).</li>\n \t<li>\n \t    Add other form-field name and value as needed.\n \t    <ul>\n \t        <li>\n \t            <code>entityIdReplace</code>. Optional. To map one entity ID (from the SKAR) to an existing gateway entity ID to resolve entity conflict. Format [find_id]::[replace_with_id]</>.\n \t            <ul>\n                  <li>The Solution Kit Manager will replace the entity ID to the left of the double colon (::) with the entity ID to the right. E.g. set <code>entityIdReplace</code> to <code>f1649a0664f1ebb6235ac238a6f71a6d::66461b24787941053fc65a626546e4bd</code>.</li>\n \t                <li>Multiple values accepted (values from multiple fields with the same form-field name are treated as a list of values).</li>\n \t                <li><b>Mapping must be overridable</b> from the solution kit author (e.g. mapping with srcId=[find_id] has <code>SK_AllowMappingOverride = true</code>). An error occurs when attempting to replace an non-overridable mapping.</li>\n \t            </ul>\n \t        </li>\n \t        <li>\n \t            <code>solutionKitSelect</code>: Optional. To select which solution kit in the uploaded SKAR will be installed and what instance modifier will be applied to the installed instance.\n              <ul>\n                  <li>The value format of <code>solutionKitSelect</code> is [ID]::[IM], where <i>\"::\"</i> is a deliminator, [ID] is the GUID of the installed solution kit, and [IM] is the instance modifier applied to the installed instance. If [IM] is not specified, or the value of [IM] is empty, then the default instance modifier (empty value) is used.</li>\n \t                <li>If no <code>solutionKitSelect</code> provided, all solution kit(s) in the upload SKAR will be installed.</li>\n \t                <li>Multiple <code>solutionKitSelect</code> allowed: to specify multiple solution kits to install.</li>\n \t                <li>Note: the value of each instance modifier should not include \"::\", since \"::\" is a reserved delimiter.</li>\n \t            </ul>\n \t         </li>\n \t         <li>\n \t             <code>instanceModifier</code>. Optional. To specify an instance modifier applied to all installed solution kits. By default, if this form field is not specified or its value is empty, then this instance modifier uses a default value (empty value).\n \t             <ul>\n \t                 <li>Applying <code>instanceModifier</code> is a quick way to apply a same instance modifier to a list of solution kits that have a same instance modifier. However, this instance modifier is only applied in the following two scenarios:</li>\n \t                 <li>(1) No any <code>solutionKitSelect</code> specified (i.e., all solution kit(s) in the SKAR will be installed.)</li>\n \t                 <li>(2) Some <code>solutionKitSelect</code> specified, but without [IM] specified.</li>\n \t                 <li>Note: the value of each instance modifier should not include \"::\", since \"::\" is a reserved delimiter.</li>\n \t             </ul>\n \t         </li>\n \t        <li>Passing values to the Custom Callback. Optional. All form-fields not listed above will be passed to the Custom Callback.</li>\n \t    </ul>\n \t</li>\n </ul>\n\n <p>Here's a cURL example (note the use of the --insecure option for development only):</p>\n <code>\n      curl --user admin_user:the_password --insecure\n      --form entityIdReplace=f1649a0664f1ebb6235ac238a6f71a6d::66461b24787941053fc65a626546e4bd\n      --form entityIdReplace=0567c6a8f0c4cc2c9fb331cb03b4de6f::1e3299eab93e2935adafbf35860fc8d9\n      --form instanceModifier=AAA\n      --form solutionKitSelect=33b16742-d62d-4095-8f8d-4db707e9ad52\n      --form solutionKitSelect=33b16742-d62d-4095-8f8d-4db707e9ad53::BBB\n      --form \"file=@/<your_path>/SimpleSolutionKit-1.1-20150823.sskar\" --form MyInputTextKey=Hello\n      https://127.0.0.1:8443/restman/1.0/solutionKitManagers\n </code>\n\n <h5>To Upgrade</h5>\n Same as Install above except introducing a new query parameter <code></code>'id'</code> and changing the formats of <code>'instanceModifier'</code> and <code>'solutionKitSelect'</code>:\n <ul>\n     <li>\n         Specify a query parameter 'id' for a previous installed Solution Kit GUID in the request URL. The ID can be either a parent solution kit's GUID or a non-parent solution kit's GUID.\n         <br>For example:<code>https://127.0.0.1:8443/restman/1.0/solutionKitManagers?id=33b16742-d62d-4095-8f8d-4db707e9ad52</code>\n     </li>\n     <li>\n \t        <code>instanceModifier</code>. Optional. To specify an existing instance modifier used to combine with the id query parameter to identify a unique solution kit for upgrade.  The value format of <code>instanceModifier</code> is [Current Instance Modifier].  If this parameter is not specified, a default instance modifier will be used (default value: empty string or null).\n \t   </li>\n \t   <li>\n \t        <code>solutionKitSelect</code>: Optional. To select which child solution kits in the uploaded SKAR will be selected for upgrade. The value format of <code>solutionKitSelect</code> is [ID].\n \t   </li>\n </ul>\n\n <p>Here's a cURL example (note the use of the --insecure option for development only):</p>\n <code>\n      curl --user admin_user:the_password --insecure\n      --form instanceModifier=AA\n      --form solutionKitSelect=33b16742-d62d-4095-8f8d-4db707e9ad52\n      --form solutionKitSelect=33b16742-d62d-4095-8f8d-4db707e9ad53\n      --form file=@/<your_path>/SampleSolutionKit-upgrade-version.sskar\n      https://127.0.0.1:8443/restman/1.0/solutionKitManagers?id=33b16742-d62d-4095-8f8d-4db707e9ad52\n </code>\r\nInstall Or Upgrade",
        "summary": "Install or Upgrade Solution Kit",
        "operationId": "SolutionKitManagersPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "SolutionKitManagers Request",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
          }
        }, {
          "name": "id",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Optional, note this is a query parameter, not a form key-value. Select which Solution Kit ID(s) in the uploaded SKAR to upgrade."
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Solution Kit Manager"],
        "description": "Uninstall the Solution Kit record and the entities installed from the original SKAR (if delete mappings were provided by the SKAR author).\n <ul>\n     <li>Use a <code>DELETE</code> request.</li>\n     <li>Specify the Solution Kit ID as a query parameter in the URL. The ID consists of two parts, solution kit GUID and instance modifier used. The two parts are separated by \"::\".</li>\n     <li>Four types of ID URL format:\n          <ul>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?id=[Non-Parent_GUID]::[IM]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?id=[Parent_GUID]::[IM]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?id=[Parent_GUID]</li>\n              <li>https://localhost:8443/restman/1.0/solutionKitManagers?id=[Parent_GUID]::[IM]&childId=[Child_1_GUID]...&childId=[Child_n_GUID]</li>\n          </ul>\n     </li>\n </ul>\n In the URL, [IM] is an instance modifier, which combines with a GUID to find a unique solution kit. If [IM] is missed, then a default instance modifier (empty value) will be used.\n <ul>\n     <li>Use the type (1), if deleting a single non-parent solution kit.</li>\n     <li>Use the type (2), if deleting all child solution kits with the specified instance modifier.</li>\n     <li>Use the type (3), if deleting all child solution kits without an instance modifier.</li>\n     <li>Use the type (4), if deleting some of child solution kits specified by an instance modifier [IM]. Omit \"::[IM]\" part of the request to delete some child solution kits without an instance modifier.</li>\n </ul>\r\nUninstall",
        "summary": "Uninstall Solution Kit",
        "operationId": "SolutionKitManagersDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "query",
          "required": false,
          "type": "string",
          "description": "Solution kit GUID and instance modifier of a single solution kit or a collection of solution kits to delete."
        }, {
          "name": "childId",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "GUID and instance modifier of child solution kits to delete"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/users": {
      "get": {
        "tags": ["User"],
        "description": "<p>Returns a list of users. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList Users",
        "summary": "List All Users",
        "operationId": "UsersGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "login"],
          "type": "string",
          "description": "Key to sort the list by."
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n               ascending if not specified"
        }, {
          "name": "login",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Login filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["User"],
        "description": "Creates a new user. New users can only be created on the internal identity provider.\r\nCreate User",
        "summary": "Create Users",
        "operationId": "UsersPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/users/{userID}/password": {
      "put": {
        "tags": ["User"],
        "description": "Change this user's password\r\nChange User Password",
        "summary": "Change Users Password By UserID",
        "operationId": "UsersPasswordByUserIDPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }, {
          "name": "format",
          "in": "query",
          "required": false,
          "default": "plain",
          "type": "string",
          "description": "The format of the password. \"plain\" or \"sha512crypt\""
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/users/{userID}/certificate": {
      "get": {
        "tags": ["User"],
        "description": "Gets the user's certificate\r\nGet User Certificate",
        "summary": "List Users Certificate By UserID",
        "operationId": "UsersCertificateByUserIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["User"],
        "description": "Set this user's certificate\r\nSet User Certificate",
        "summary": "Set Users Certificate By UserID",
        "operationId": "UsersCertificateByUserIDPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["User"],
        "description": "Removes the certificate from the user\r\nDelete User Certificate",
        "summary": "Delete Users Certificate By UserID",
        "operationId": "UsersCertificateByUserIDDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user"
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/users/template": {
      "get": {
        "tags": ["User"],
        "description": "Returns a template, which is an example user that can be used as a reference for what user objects should look\n like.\r\nTemplate User",
        "summary": "Users Template",
        "operationId": "UsersTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/users/{userID}": {
      "get": {
        "tags": ["User"],
        "description": "Returns a user with the given ID.\r\nGet User",
        "summary": "List Users By UserID",
        "operationId": "UsersByUserIDGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["User"],
        "description": "Updates an existing user\r\nUpdate User",
        "summary": "Update Users By UserID",
        "operationId": "UsersByUserIDPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user to update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["User"],
        "description": "Deletes an existing user\r\nDelete User",
        "summary": "Delete Users By UserID",
        "operationId": "UsersByUserIDDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "userID",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the user to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },

    "/1.0/workQueues": {
      "get": {
        "tags": ["Work Queue"],
        "description": "<p>Returns a list of  work queues. Can optionally sort the resulting list in ascending or\n descending order. Other params given will be used as search values.</p>\n <p class=\"italicize\">Examples:</p>\n <div class=\"code indent\"><pre>/restman/1.0/workQueues?name=MyWorkQueue</pre></div>\n <p>Returns work queue with name \"MyWorkQueue\".</p>\n <p>If a parameter is not a valid search value a bad request error will be returned.</p>\r\nList",
        "summary": "List All Work Queues",
        "operationId": "WorkQueuesGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "sort",
          "in": "query",
          "required": false,
          "enum": ["id", "name"],

          "type": "string",
          "description": "Key to sort the list by"
        }, {
          "name": "order",
          "in": "query",
          "required": false,
          "enum": ["asc", "desc"],

          "type": "string",
          "description": "Sort order for the list; 'asc'=ascending, 'desc'=descending; defaults to\n                        ascending if not specified"
        }, {
          "name": "name",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Name filter"
        }, {
          "name": "maxQueueSize",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Maximum queue size filter"
        }, {
          "name": "threadPoolMax",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Maximum thread pool filter"
        }, {
          "name": "rejectPolicy",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Reject policy filter"
        }, {
          "name": "securityZone.id",
          "in": "query",
          "required": false,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Security zone ID filter"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "post": {
        "tags": ["Work Queue"],
        "description": "Creates a new work queue\r\nCreate",
        "summary": "Create Work Queues",
        "operationId": "WorkQueuesPost",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/workQueues/{id}": {
      "get": {
        "tags": ["Work Queue"],
        "description": "Returns a work queue with the given ID.\r\nGet",
        "summary": "List Work Queues By ID",
        "operationId": "WorkQueuesByIdGet",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the Cassandra connection to return"
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "put": {
        "tags": ["Work Queue"],
        "description": "Creates or Updates an existing work queue. If a work queue with the given ID does not exist one\n will be created, otherwise the existing one will be updated.\r\nCreate Or Update",
        "summary": "Create or Update Work Queues By ID",
        "operationId": "WorkQueuesByIdPut",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ID of the work queue to create or update"
        }, {
          "name": "String",
          "in": "body",
          "required": true,
          "description": "",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "object"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      },
      "delete": {
        "tags": ["Work Queue"],
        "description": "Deletes an existing work queue.\r\nDelete",
        "summary": "Delete Work Queues By ID",
        "operationId": "WorkQueuesByIdDelete",
        "produces": ["application/xml"],
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The ID of the work queue to delete."
        }],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [{"simple": []}]
      }
    },
    "/1.0/workQueues/template": {
      "get": {
        "tags": ["Work Queue"],
        "description": "Returns a template, which is an example work queue that can be used as a reference for what work queue\n objects should look like.\r\nTemplate",
        "summary": "Work Queues Template",
        "operationId": "WorkQueuesTemplateGet",
        "produces": ["application/xml"],
        "parameters": [],
        "responses": {
          "200": {            "description": "OK",
            "schema": {
              "type": "string"
            },
            "examples": {}
          }
        },
        "security": [{"simple": []}]
      }
    }
  }
}
